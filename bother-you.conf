img-cstmztn {

  name = bother-you
  os = Raspberry Pi OS Lite

  size = 4 GB

  ssh {
    enabled: true
    authorized-keys = {
      files: ["$HOME/.ssh/id_*.pub"]
    }
  }

  default-user {
    newUsername: ${IMG_CSTMZR_USERNAME}
    newPassword: ${IMG_CSTMZR_PASSWORD}
  }

  usb-otg {
    profiles = [g_acm_ms, g_ether, g_webcam] # "g_hid", "g_multi", "g_webcam" -> Keyboard/Mouse, Ethernet+Mass
  }

  flash.auto = true

  setup = [
    {
      name: the basics
      scripts: [
        {
          name: sudo -i
          content: """
            sudo -i
            """
        },
        {
          name: ‚ÄæÕüÕüÕû(((Íé§ ‚úßÊõ≤‚úß)ÃÇ‚ÄîÃ≥ÕüÕûÕûo configure SSH port
          content: """
            sed -i 's/^\#Port 22$/Port 3421/g' /etc/ssh/sshd_config
            """
        },
        {
          name: Raspberry Pi Zero as a Serial Gadget
          content: """
            systemctl enable getty@ttyGS0.service
            """
        },
        {
          name: configure DHCP and DNS for "usb0"
          content: """
            apt-get install -y -m dnsmasq && apt-get autoremove -y -m

            sed -i 's/^\#name_servers=127.0.0.1$/name_servers="::1 127.0.0.1"/g' /etc/resolvconf.conf && resolvconf -u && chattr +i /etc/resolv.conf

            dnsmasq_conf=$(printf \"listen-address=::1,127.0.0.1,192.168.168.192\nno-resolv\nserver=8.8.8.8\nserver=8.8.4.4\nexpand-hosts\ndomain=reflector\naddress=/reflector/192.168.168.192\ndhcp-authoritative\ndomain-needed\nbogus-priv\ninterface=usb0\ndhcp-range=192.168.168.168,192.168.168.189,24h\ndhcp-option=option:dns-server,192.168.168.192\") && [ -f /etc/dnsmasq.conf ] && [ \"$(cat /etc/dnsmasq.conf)\" = \"$dnsmasq_conf\" ] || echo \"$dnsmasq_conf\" > /etc/dnsmasq.conf
            systemctl enable dnsmasq
            """
        },
        {
          name: remove unused DHCP clients
          content: """
            apt-get purge -qq -m isc-dhcp-client
            apt-get purge -y -m udhcpd
            apt-get autoremove -y -m
            """
        },
        {
          name: set timezone to UTC
          content: """
            timedatectl set-local-rtc 0
            """
        },
        {
          name: set timezone to Europe/Berlin
          content: """
            ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime
            """
        },
        {
          name: set keyboard layout to "de"
          content: """
            sed -i 's/XKBLAYOUT=\"\w*"/XKBLAYOUT=\"'de'\"/g' /etc/default/keyboard
            """
        },
        {
          name: set locale to "de_DE"
          content: """
            sed -i 's/XKBLAYOUT=\"\w*"/XKBLAYOUT=\"'de'\"/g' /etc/default/keyboard
            """
        },
        {
          name: install build tools
          content: """
            apt-get update -qq -m; apt-get install -qq -m build-essential git
            """
        },
        {
          name: install Remote.it
          content: """
            apt-get install -qq -m remoteit
            """
        },
        {
          name: install health checks
          content: """
            command -v sch >/dev/null 2>&1 || { apt-get update; pip3 install sch; }
            """
        }
      ]
    },
    {
      name: node red
      scripts: [
        {
          name: sudo -i
          content: """
            sudo -i
            """
        },
        {
          name: TODO
          content: """
            #nohup bash -c 'i=1; while [ 10 -gt $i ]; do echo "Installing Node-RED, attempt $i/10"; curl -sL -o nodered-install.sh https://raw.githubusercontent.com/node-red/linux-installers/master/deb/update-nodejs-and-nodered && chmod +x nodered-install.sh && echo "y\ry\r" | bash nodered-install.sh && systemctl enable nodered.service && break; ((i = i+1)); done;'
            """
        },
        {
          name: install Docker pre-requisites
          content: """
            apt-get install -qq -m apt-transport-https ca-certificates software-properties-common

            cat /boot/cmdline.txt | grep -a " cgroup_enable=cpuset" 1>/dev/null || echo -n "$(cat /boot/cmdline.txt) cgroup_enable=cpuset" | sudo tee /boot/cmdline.txt

            cat /boot/cmdline.txt | grep -a " cgroup_enable=memory" 1>/dev/null || echo -n "$(cat /boot/cmdline.txt) cgroup_enable=memory" | sudo tee /boot/cmdline.txt
            """
        },
        {
          name: install Docker
          content: """
            curl -fsSL https://get.docker.com -o - | sudo sh
            usermod -aG docker pi
            usermod -aG docker bkahlert
            """
        },
        {
          name: install dockerized Node-RED
          content: """
            docker start reflector-backend || docker run -d --restart unless-stopped -p 1880:8333 -v /home/pi/reflector-backend:/data -e TZ=Europe/Berlin --name reflector-backend nodered/node-red:1.1.3-10-arm32v6
          # $ docker run --privileged -d whatever
          # $ docker run --device /dev/gpiomem -d whatever
            """
        },
      ]
    },
    {
      name: misc
      scripts: [
        {
          name: sudo -i
          content: """
            sudo -i
            """
        },
        {
          name: "#TODO # Bluetooth"
          content: """
            #apt-get install bluez-tools
            """
        },
        {
          name: install Avahi
          content: """
            apt-get install -qq -m avahi-daemon
            mkdir -p /etc/avahi/services
            cat <<EOF >/etc/avahi/services/bother-you.conf
            <?xml version="1.0" standalone='no'?><!--*-nxml-*-->
            <!DOCTYPE service-group SYSTEM "avahi-service.dtd">
            <service-group>
              <name replace-wildcards="yes">‚î¥‚î¨‚î¥‚î§¬¥ÔºØ¬¥)Ôæâ   %h   Œ£(‚Äò–î‚Äô‚Åï)!?</name>
              <name replace-wildcards="yes">‚î¥‚î¨‚î¥‚î§ÔΩ•‚ÄøÔΩ•)œÉ   %h   üïö(`‚Äø`‚Åï)2'</name>
              <service>
                <type>_http._tcp</type>
                <port>80</port>
                <txt-record>path=/status</txt-record>
              </service>
              <service>
                <type>_ssh._tcp</type>
                <port>3421</port>
                <txt-record>user=pi</txt-record>
              </service>
              <service>
                <type>_smb._tcp</type>
                <port>445</port>
                <txt-record>user=pi</txt-record>
                <txt-record>path=/home</txt-record>
              </service>
              <service>
                <type>_device-info._tcp</type>
                <port>0</port>
                <txt-record>model=AirPortExtreme5</txt-record>
                <!-- check /System/Library/CoreServices/CoreTypes.bundle/Contents/Info.plist for all possible values -->
              </service>
            </service-group>
            EOF
            systemctl enable avahi-daemon
            systemctl start avahi-daemon
            """
        },
        {
          name: install CIFS/SMB
          content: """
            apt-get install -qq -m samba samba-common-bin smbclient cifs-utils
            mkdir -p /etc/samba
            cat <<EOF >>etc/samba/smb.conf
            [home]
            path = /home/${username}
            writeable=Yes
            create mask=0744
            directory mask=0744
            public=no
            EOF
            echo -ne "$password\n$password\n" | smbpasswd -a -s "$username"
            """
        },
        {
          name: install browser
          content: """
            #nohup bash -c "apt-get midori -qq -m"
            """
        },
        {
          name: "https://www.npmjs.com/package/node-red-contrib-easybotics-led-matrix"
          content: """
            # TODO has all to be installed inside docker
            # run as root
            #sudo systemctl enable nodered.service
            #sudo npm config set unsafe-perm true

            #https://www.npmjs.com/package/node-red-contrib-huemagic
            #npm install node-red-dashboard
            """
        },
      ]
    },
  ]
}
