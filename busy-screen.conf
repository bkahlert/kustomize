img {

  trace = false

  name = busy-screen
  os = Raspberry Pi OS Lite

  timezone = Europe/Berlin

  hostname {
    name: """busy-"""${IMG_CSTMZR_USERNAME}""""""
    random-suffix: false
  }

  wifi {
    wpa-supplicant = ${IMG_CSTMZR_WPA_SUPPLICANT}
    //    auto-reconnect = true
    power-safe-mode = false
  }

  size = 12 GiB

  ssh {
    enabled: true
    port: 3421
    authorized-keys = {
      files: ["$HOME/.ssh/id_*.pub"]
    }
  }

  default-user {
    newUsername: ${IMG_CSTMZR_USERNAME}
    newPassword: ${IMG_CSTMZR_PASSWORD}
  }

  samba {
    homeShare: true
    rootShare: read-only
  }

  usb-gadgets {
    ethernet {
      dhcpRange: 192.168.168.160..192.168.168.174
      deviceAddress: 192.168.168.168
      hostAsDefaultGateway: true
      enableSerialConsole: false
      manufacturer: "Björn Kahlert",
      product: "Busy Screen of "${IMG_CSTMZR_USERNAME}"",
    }
  }

  tweaks {
    apt-retries: 10
  }

  files = [
    {
      host-path: ${BOTHER_YOU_FLOW}
      disk-path: /home/${IMG_CSTMZR_USERNAME}/busy-screen/node-red/flows.json
    },
    {
      host-path: ""${HOME}"/Development/com.bkahlert/busy-screen/build/distributions/busy-screen.js"
      disk-path: /home/${IMG_CSTMZR_USERNAME}/busy-screen/public/busy-screen.js
    },
    {
      host-path: ""${HOME}"/Development/com.bkahlert/busy-screen/build/distributions/index.html"
      disk-path: /home/${IMG_CSTMZR_USERNAME}/busy-screen/public/index.html
    },
    {
      append: """
        {
          "name": "curl -X PUT --location \"http://{{host}}:1880/status\" -H \"Content-Type: application/json; charset=utf-8\" -d '{ \"name\": \"sample status\" }'",
          "task": "GETTING STARTED"
        }
        """,
      disk-path: /home/${IMG_CSTMZR_USERNAME}/busy-screen/node-red/status.json
    },
    {
      append: """
        # reduce flash drive IO
        tmpfs /tmp tmpfs defaults,noatime,nosuid,nodev,noexec,mode=0755,size=100M 0 0
        tmpfs /var/tmp tmpfs defaults,noatime,nosuid,nodev,noexec,mode=0755,size=100M 0 0
        tmpfs /var/log tmpfs defaults,noatime,nosuid,nodev,noexec,mode=0755 0 0
        """,
      disk-path: /etc/fstab
    },
  ]

  setup = [
    {
      name: update
      scripts: [
        {
          name: "ː̗̀٩꒰ꋃ꒱وː̖́ UPDATE ೕ(˃̵ᴗ˂̵ ๑)"
          content: """
              apt-get update -o Acquire::Check-Valid-Until=false -o Acquire::Check-Date=false
              apt update -y -m
              apt full-upgrade -y -m
              """
        }
      ]
    },
    {
      name: the basics
      scripts: [
        {
          name: "set keyboard layout to de ✧٩(•́⌄•́๑)"
          content: """
              sed -i 's/XKBLAYOUT=\"\w*"/XKBLAYOUT=\"'de'\"/g' /etc/default/keyboard
              """
        },
        {
          name: "٩(｡•ω•｡)و install build tools"
          content: """
              apt-get update -y -m
              apt-get install -y -m build-essential
              apt-get install -y -m git
              """
        },
        {
          name: "(۶•̀ᴗ•́)۶ install Python 3 pip"
          content: """
              apt-get install -y -m python3-pip
              """
        },
        //        {
        //          name: "install health checks ٩(✪ꀾ⍟༶)و"
        //          content: """
        //              command -v sch >/dev/null 2>&1 || { apt-get update; pip3 install sch; }
        //              """
        //        }
      ]
    },
    {
      name: misc
      scripts: [
        {
          name: "Install Avahi ٩( ᐛ )و"
          content: """
              apt-get install -y -m avahi-daemon
              mkdir -p /etc/avahi/services
              """
        },
        {
          name: "⌒⌒ ⌒ “⊂( っ☉ω☉)っ Disable User Service Publishing"
          content: """
              sed -i 's/.*disable-user-service-publishing.*/disable-user-service-publishing=yes/g' /etc/avahi/avahi-daemon.conf
              """
        },
        {
          name: "Configure Avahi (*≧∀≦)ﾉ DEVICE-INFO"
          content: """
              cat <<EOF >/etc/avahi/services/device-info.service
              <?xml version="1.0" standalone='no'?><!--*-nxml-*-->
              <!DOCTYPE service-group SYSTEM "avahi-service.dtd">
              <service-group>
                <name replace-wildcards="yes">┴┬┴┤´Ｏ´)ﾉ  """${IMG_CSTMZR_USERNAME}"""!?  Σ(‘Д’⁕)</name>
                <service>
                  <type>_device-info._tcp</type>
                  <port>0</port>
                  <txt-record>model=AirPortExtreme5</txt-record>
                  <!-- check /System/Library/CoreServices/CoreTypes.bundle/Contents/Info.plist for all possible values -->
                </service>
              </service-group>
              EOF
              """
        },
        {
          name: "Configure Avahi (*≧∀≦)ﾉ SSH"
          content: """
              cat <<EOF >/etc/avahi/services/ssh.service
              <?xml version="1.0" standalone='no'?><!--*-nxml-*-->
              <!DOCTYPE service-group SYSTEM "avahi-service.dtd">
              <service-group>
                <name replace-wildcards="yes">┴┬┴┤･‿･)σ  """${IMG_CSTMZR_USERNAME}"""'s SSH</name>
                <service>
                  <type>_ssh._tcp</type>
                  <port>"""${img.ssh.port}"""</port>
                  <txt-record>user="""${IMG_CSTMZR_USERNAME}"""</txt-record>
                </service>
              </service-group>
              EOF
              """
        },
        {
          name: "Configure Avahi (*≧∀≦)ﾉ SFTP"
          content: """
              cat <<EOF >/etc/avahi/services/sftp.service
              <?xml version="1.0" standalone='no'?><!--*-nxml-*-->
              <!DOCTYPE service-group SYSTEM "avahi-service.dtd">
              <service-group>
                <name replace-wildcards="yes">┴┬┴┤･‿･)σ  """${IMG_CSTMZR_USERNAME}"""'s SFTP</name>
                <service>
                  <type>_sftp-ssh._tcp</type>
                  <port>"""${img.ssh.port}"""</port>
                  <txt-record>path=/home/"""${IMG_CSTMZR_USERNAME}"""</txt-record>
                  <txt-record>u="""${IMG_CSTMZR_USERNAME}"""</txt-record>
                </service>
              </service-group>
              EOF
              """
        },
        {
          name: "Configure Avahi (*≧∀≦)ﾉ SMB"
          content: """
              cat <<EOF >/etc/avahi/services/smb.service
              <?xml version="1.0" standalone='no'?><!--*-nxml-*-->
              <!DOCTYPE service-group SYSTEM "avahi-service.dtd">
              <service-group>
                <name replace-wildcards="yes">┴┬┴┤･‿･)σ  """${IMG_CSTMZR_USERNAME}"""'s SMB</name>
                <service>
                  <type>_smb._tcp</type>
                  <port>445</port>
                  <txt-record>user="""${IMG_CSTMZR_USERNAME}"""</txt-record>
                  <txt-record>path=/home</txt-record>
                </service>
              </service-group>
              EOF
              """
        },
        {
          name: "Configure Avahi (*≧∀≦)ﾉ BUSY SCREEN"
          content: """
              cat <<EOF >/etc/avahi/services/busy-screen.service
              <?xml version="1.0" standalone='no'?><!--*-nxml-*-->
              <!DOCTYPE service-group SYSTEM "avahi-service.dtd">
              <service-group>
                <name replace-wildcards="yes">┴┬┴┤･‿･)σ  """${IMG_CSTMZR_USERNAME}"""'s STATUS</name>
                <service>
                  <type>_http._tcp</type>
                  <port>80</port>
                  <txt-record>path=/status</txt-record>
                </service>
              </service-group>
              EOF
              """
        },
        {
          name: "Enable Avahi (ง ͡ʘ ͜ʖ ͡ʘ)ง"
          content: """
              systemctl enable avahi-daemon
              systemctl start avahi-daemon
              """
        },
        {
          name: "install browser Σ⊂⊂(☉ω☉∩)"
          sources: [
            "https://maker-tutorials.com/autostart-midori-browser-vollbild-kiosk-mode-via-konsole-ohne-desktop/",
            "https://www.matteomattei.com/web-kiosk-with-raspberry-pi-and-read-only-sd/",
          ],
          content: """
              apt-get install -y midori matchbox-window-manager xserver-xorg x11-xserver-utils unclutter xinit
              apt-get install -y ttf-mscorefonts-installer fonts-dejavu fonts-dejavu-extra


              # user needs to handle /dev/tty devices
              gpasswd -a """${IMG_CSTMZR_USERNAME}""" tty


              # set permissions of /dev/tty to defined state
              sed -i '/^exit 0/c\chmod g+rw /dev/tty?\nexit 0' /etc/rc.local


              # polling start script
              cat <<EOF >/home/"""${IMG_CSTMZR_USERNAME}"""/kiosk.sh
              #!/bin/bash
              echo "Waiting for http://localhost/ ..."
              'timeout' '300s' 'sh' '-c' 'while true; do
                  curl --silent --fail --max-time 5 '"'"'http://localhost/'"'"' && break
                  sleep 5
              done'

              echo "Hit Ctrl+Alt+F1 / ⌃⌥F1 to quit"
              # disable DPMS (Energy Star) features
              xset -dpms
              # disable screen saver
              xset s off
              # don't blank the video device
              xset s noblank
              # disable mouse pointer
              # unclutter &
              # run window manager
              matchbox-window-manager -use_cursor no -use_titlebar no  &
              # run browser
              midori -e Fullscreen -e Navigationbar -a http://localhost/
              EOF
              chmod +x /home/"""${IMG_CSTMZR_USERNAME}"""/kiosk.sh


              # autostart
              cat <<EOF >>/home/"""${IMG_CSTMZR_USERNAME}"""/.bashrc
              # start kiosk unless logged in through SSH session
              if [ -z "\${SSH_TTY}" ]; then
                xinit ~/kiosk.sh
              fi
              EOF


              # debug
              cat <<EOF >/home/"""${IMG_CSTMZR_USERNAME}"""/close_kiosk.sh
              #!/bin/bash
              sudo kill "$(pgrep X)"
              EOF
              chmod +x /home/"""${IMG_CSTMZR_USERNAME}"""/close_kiosk.sh
              """
        },
        {
          name: "(ง ͡ʘ ͜ʖ ͡ʘ)ง install Docker pre-requisites"
          content: """
              apt-get install -qq -m apt-transport-https ca-certificates software-properties-common
              cat /boot/cmdline.txt | grep -a " cgroup_enable=cpuset" 1>/dev/null || echo -n "$(cat /boot/cmdline.txt) cgroup_enable=cpuset" | sudo tee /boot/cmdline.txt
              cat /boot/cmdline.txt | grep -a " cgroup_enable=memory" 1>/dev/null || echo -n "$(cat /boot/cmdline.txt) cgroup_enable=memory" | sudo tee /boot/cmdline.txt
              """
        },
        {
          name: "restart avahi"
          content: """
              systemctl restart --no-block avahi-daemon
              """
        },
        //        {
        //          name: "Bluetooth ೕ(˃̵ᴗ˂̵ ๑)"
        //          content: """
        //              apt-get install bluez-tools
        //              """
        //        },
      ]
    },
  ]

  first-boot = [
    {
      name: "install Docker ٩(ˊᗜˋ*)و"
      content: """
          curl -fsSL https://get.docker.com | sh
          usermod -aG docker """${IMG_CSTMZR_USERNAME}"""
          pip3 -v install docker-compose
          """
    },
    {
      name: "\\ \\ \\٩(๑˃̵ᴗ˂̵)و/ / / install dockerized Node-RED and Busy Screen"
      content: """
          # Node-RED install location
          mkdir -p /home/"""${IMG_CSTMZR_USERNAME}"""/busy-screen/node-red


          # docker-compose.yml to start Node-RED
          cat <<EOF >/home/"""${IMG_CSTMZR_USERNAME}"""/busy-screen/docker-compose.yml
          version: "3.5"

          services:
            frontend:
              image: nginx
              ports:
                - "80:80"
              networks:
                - shared
              volumes:
                - /home/"""${IMG_CSTMZR_USERNAME}"""/busy-screen/public:/usr/share/nginx/html
              restart: unless-stopped

            gpiod: # use service name "gpiod" and port "8888" to connect to gpiod services
              image: corbosman/pigpiod:latest
              networks:
                - shared
              privileged: true
              depends_on:
                - "frontend"
              restart: unless-stopped

            node-red:
              image: nodered/node-red:1.2.9-12-arm32v6
              environment:
                - TZ="""${img.timezone}"""
              ports:
                - "1880:1880"
              networks:
                - shared
              volumes:
                - /home/"""${IMG_CSTMZR_USERNAME}"""/busy-screen/node-red:/data
              depends_on:
                - "frontend"
                - "gpiod"
              restart: unless-stopped

          networks:
            shared:
          EOF


          cat <<EOF >/home/"""${IMG_CSTMZR_USERNAME}"""/start-busy-screen.sh
          #!/bin/sh
          # Fix permissions, see https://nodered.org/docs/getting-started/docker#using-a-host-directory-for-persistence-bind-mount
          sudo chown -R 1000:1000 /home/"""${IMG_CSTMZR_USERNAME}"""/busy-screen/node-red

          # Start Node-RED and Busy Screen
          docker-compose -f /home/"""${IMG_CSTMZR_USERNAME}"""/busy-screen/docker-compose.yml up -d

          # make needed modules availables to function nodes
          sed -i '/^        fs:require('"'"'fs'"'"')/d' /home/"""${IMG_CSTMZR_USERNAME}"""/busy-screen/node-red/settings.js
          sed -i 's/^    functionGlobalContext: {/&\n        fs:require('"'"'fs'"'"')/' /home/"""${IMG_CSTMZR_USERNAME}"""/busy-screen/node-red/settings.js
          EOF

          chmod +x /home/"""${IMG_CSTMZR_USERNAME}"""/start-busy-screen.sh
          /home/"""${IMG_CSTMZR_USERNAME}"""/start-busy-screen.sh
          """
    },
    {
      name: "Node-RED Extensions ✧٩(ˊωˋ*)و✧"
      content: """

          cat <<EOF >/home/"""${IMG_CSTMZR_USERNAME}"""/update-busy-screen.sh
          #!/bin/sh
          docker exec -it busy-screen_node-red_1 npm install --unsafe-perm --no-update-notifier --no-fund --only=production node-red-dashboard node-red-node-ui-iframe node-red-node-ui-webcam
          docker exec -it busy-screen_node-red_1 npm install --unsafe-perm --no-update-notifier --no-fund --only=production node-red-contrib-play-audio node-red-contrib-huemagic
          docker exec -it busy-screen_node-red_1 npm install --unsafe-perm --no-update-notifier --no-fund --only=production node-red-node-pi-gpiod
          docker exec -it busy-screen_node-red_1 npm install --unsafe-perm --no-update-notifier --no-fund --only=production

          # Fix permissions, see https://nodered.org/docs/getting-started/docker#using-a-host-directory-for-persistence-bind-mount
          sudo chown -R 1000:1000 /home/"""${IMG_CSTMZR_USERNAME}"""/busy-screen/node-red

          # Restart Node-RED and Busy Screen
          docker-compose -f /home/"""${IMG_CSTMZR_USERNAME}"""/busy-screen/docker-compose.yml restart
          EOF

          chmod +x /home/"""${IMG_CSTMZR_USERNAME}"""/update-busy-screen.sh
          /home/"""${IMG_CSTMZR_USERNAME}"""/update-busy-screen.sh
          """
    },
    //    {
    //      name: "Tailscale VPN Client ✧٩(•́⌄•́๑)و ✧"
    //      content: """
    //          apt-get install -y apt-transport-https
    //          curl -fsSL https://pkgs.tailscale.com/stable/raspbian/buster.gpg | apt-key add -
    //          curl -fsSL https://pkgs.tailscale.com/stable/raspbian/buster.list | tee /etc/apt/sources.list.d/tailscale.list
    //          apt-get update
    //          apt-get install tailscale
    //          touch /home/"""${IMG_CSTMZR_USERNAME}"""/README.md
    //          echo 'Tailscale VPN Client' > /home/"""${IMG_CSTMZR_USERNAME}"""/README.md
    //          echo '[ ] `tailscale up --authkey """${IMG_CSTMZR_TAILSCALE}""" && ip addr show tailscale0`' > /home/"""${IMG_CSTMZR_USERNAME}"""/README.md
    //          echo '[ ] Visit https://login.tailscale.com/admin/authkeys to create a new key if the command fails' > /home/"""${IMG_CSTMZR_USERNAME}"""/README.md
    //          """
    //    },
    {
      name: "Use available space ٩(ˊᗜˋ*)و"
      content: """
          sudo raspi-config --expand-rootfs
          """
    },
    {
      name: "٩(๑•̀ㅂ•́)و auto-login"
      content: """
              cat <<EOF >/etc/systemd/system/getty@tty1.service.d/autologin.conf
              [Service]
              ExecStart=
              ExecStart=-/sbin/agetty --autologin """${IMG_CSTMZR_USERNAME}""" --noclear %I 38400 linux
              EOF
              """
    },
    {
      name: "(۶•̀ᴗ•́)۶ REBOOT"
      content: """
          shutdown -r now
          """
    },
  ]
}
