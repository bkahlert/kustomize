@file:Suppress("SpellCheckingInspection", "ObjectPropertyName", "HardCodedStringLiteral")

package com.bkahlert.koodies.kaomoji

import com.bkahlert.koodies.kaomoji.Kaomojis.Generator.Companion.removeRightArm
import com.bkahlert.koodies.terminal.ANSI
import com.bkahlert.koodies.terminal.ansi.AnsiFormats.hidden
import com.bkahlert.koodies.terminal.colorize
import kotlin.properties.PropertyDelegateProvider
import kotlin.reflect.KProperty

object Kaomojis {
    @Suppress("unused")
    enum class Generator(
        val leftArm: List<String>,
        val rightArm: List<String>,
        val leftEye: List<String>,
        val rightEye: List<String>,
        val mouth: List<String>,
    ) {
        INDIFFERENCE(
            leftArm = listOf("ヽ", "┐", "╮", "ᕕ", "¯\\_"),
            rightArm = listOf("ノ", "┌", "╭", "ᕗ", "_/¯"),
            leftEye = listOf("ー", " ´ ", "︶", "￣", "´", " ˘ ", "‘"),
            rightEye = listOf("ー", " ` ", "︶", "￣", "´", " ˘ ", "` "),
            mouth = listOf("_", "ヘ", "～", "д", "▽", "ヮ", "ー", "︿", "､")),
        JOY(
            leftArm = listOf("╰", "＼", "٩", "<"),
            rightArm = listOf("ﾉ", "ノ", "o", "／"),
            leftEye = listOf("▔", "^", "¯", "☆"),
            rightEye = listOf("▔", "^", "¯", "☆"),
            mouth = listOf("▽", "ω", "ヮ", "∀")),
        LOVE(
            leftArm = listOf("", "♡╰", "ヽ", "♡＼", "٩", "❤ "),
            rightArm = listOf("", "ノ", "♡", "╯♡", " ♡", " ❤", "/ ♡", "ノ～ ♡", "۶"),
            leftEye = listOf("─", "´ ", "• ", "*", "˘", "μ", "￣", " ◡", "°", "♡", "◕", "˙", "❤", "´• ", "≧"),
            rightEye = listOf("─", " `", "• ", "*", "˘", "μ", "￣", " ◡", "°", "♡", "◕", "˙", "❤", " •`", "≦"),
            mouth = listOf("з", "_", "‿‿", "ω", "︶", "◡", "▽", "ε", "∀", "ᵕ", "‿", "³")),
        SADNESS(
            leftArm = listOf("", "o", ".･ﾟﾟ･", "。゜゜", "｡･ﾟﾟ*", "｡･ﾟ", ".｡･ﾟﾟ･", "｡ﾟ", "･ﾟ･", "｡ﾟ･ "),
            rightArm = listOf("", "o", "･ﾟﾟ･.", " ゜゜。", "*ﾟﾟ･｡", "･｡", "･ﾟﾟ･｡.", "･ﾟ･", "･ﾟ｡"),
            leftEye = listOf("μ", "T", "╥", "〒", "-", " ; ", "个", "╯", "ಥ", ">", "｡•́", "╯"),
            rightEye = listOf("μ", "T", "╥", "〒", "-", " ; ", "个", "╯", "ಥ", "<。", "•̀｡", "<、"),
            mouth = listOf("_", "ヘ", "ω", "﹏", "Д", "︿", "-ω-", "︵", "╭╮", "Ｏ", "><")),
        ;

        fun random(
            fixedLeftArm: String = leftArm.random(),
            fixedLeftEye: String = leftEye.random(),
            fixedMouth: String = mouth.random(),
            fixedRightEye: String = rightEye.random(),
            fixedRightArm: String = rightArm.random(),
        ): String = "$fixedLeftArm$fixedLeftEye$fixedMouth$fixedRightEye$fixedRightArm"

        companion object {
            val leftArms: List<String> = values().flatMap { it.leftArm }
            val rightArms: List<String> = values().flatMap { it.rightArm }
            val leftEyes: List<String> = values().flatMap { it.leftEye }
            val rightEyes: List<String> = values().flatMap { it.rightEye }
            val mouths: List<String> = values().flatMap { it.mouth }

            fun CharSequence.removeRightArm(): CharSequence {
                val rightArm = rightArms.dropWhile { !this.endsWith(it) }
                return if (rightArm.isNotEmpty()) this.removeSuffix(rightArm.first()) else this
            }
        }
    }

    fun random(): String = with(Generator) { listOf(leftArms, leftEyes, mouths, rightEyes, rightArms).joinToString("") { it.random() } }

    data class Kaomoji(
        private val template: String,
        private val leftArm: IntRange? = null,
        private val rightArm: IntRange? = null,
        private val leftEye: IntRange? = null,
        private val rightEye: IntRange? = null,
        private val mouth: IntRange? = null,
        private val wand: IntRange? = null,
    ) : CharSequence by toString() {
        fun random(): String {
            val listOfNotNull: List<IntRange> = listOfNotNull(leftArm, leftEye, mouth, rightEye, rightArm)
            return listOfNotNull.foldRight(template) { intRange, acc ->
                acc.substring(0 until intRange.first) + Generator.mouths.random() + acc.subSequence(intRange.last, acc.lastIndex)
            }
        }

        fun withMagic(): String {
            val listOfNotNull: List<IntRange> = listOfNotNull(wand)
            return listOfNotNull.fold(template) { acc, intRange ->
                acc.substring(0 until intRange.first) + ANSI.termColors.colorize(acc.substring(intRange)) + acc.subSequence(intRange.last, acc.lastIndex + 1)
            }
        }

        operator fun getValue(kaomojis: Kaomojis, property: KProperty<*>): Kaomoji = this
        override fun toString(): String = copy(template = withMagic()).random()
    }

    @Suppress("KDocMissingDocumentation", "ObjectPropertyName", "NonAsciiCharacters")
    val `(＃￣_￣)o︠・━・・━・━━・━☆`: Kaomoji by five(mouth = 3..4, rightArm = 6..7, wand = 8..16)

    fun five(
        leftArm: IntRange? = null, rightArm: IntRange? = null, leftEye: IntRange? = null, rightEye: IntRange? = null, mouth: IntRange? = null,
        wand: IntRange? = null,
    ): PropertyDelegateProvider<Kaomojis, Kaomoji> =
        PropertyDelegateProvider { _, property -> Kaomoji(property.name, leftArm, leftEye, rightEye, rightArm, mouth, wand) }

    @Suppress("unused")
    val Wizards: List<CharSequence> = listOf(
        "(ﾉ>ω<)ﾉ :｡･:*:･ﾟ’★,｡･:*:･ﾟ’☆",
        `(＃￣_￣)o︠・━・・━・━━・━☆`,
        "(/￣‿￣)/~~☆’.･.･:★’.･.･:☆",
        "(∩ᄑ_ᄑ)⊃━☆ﾟ*･｡*･:≡( ε:)",
        "(ノ ˘_˘)ノ ζζζ  ζζζ  ζζζ",
        "(ノ°∀°)ノ⌒･*:.｡. .｡.:*･゜ﾟ･*☆",
        "(⊃｡•́‿•̀｡)⊃━✿✿✿✿✿✿",
        "ଘ(੭ˊᵕˋ)੭* ੈ✩‧₊˚",
    )

    /**
     * Returns a thinking [Kaomoji] of the form:
     *
     * ```
     *           ͚͔˱ ❨ ( something )
     * (^～^) ˙
     * ```
     */
    fun CharSequence.thinking(value: String): String {
        val kaomoji = this
        val thinkLine = "${kaomoji.hidden()}   ͚͔˱ ❨ ( $value )"
        return "$thinkLine\n$kaomoji ˙"
    }

    /**
     * Returns a fishing [Kaomoji] of the form:
     *
     * ```
     * （♯▼皿▼）o/￣￣￣<゜)))彡
     * ```
     */
    fun CharSequence.fishing(fish: String? = (this@Kaomojis.fish + whales).random()): String {
        val fishingRod = "/￣￣￣"
        val fishingArm = "o"
        val notFishingKaomoji = (this ?: fishers.random()).removeSuffix(fishingRod)
        val armLessFisher = notFishingKaomoji.removeRightArm()
        return "$armLessFisher$fishingArm$fishingRod$fish"
    }

    /**
     * Returns a random fishing [Kaomoji] of the form:
     *
     * ```
     * （♯▼皿▼）o/￣￣￣<゜)))彡
     * ```
     */
    fun fishing(fish: String? = (this.fish + whales).random()): String = fishers.random().fishing(fish)

    @Suppress("KDocMissingDocumentation", "unused")
    val Angry: List<CharSequence> = listOf(
        "ಠ_ಠ",
        "⋋_⋌",
        "눈_눈",
        "ಠ⌣ಠ",
        "ಠ▃ಠ",
        "ఠ ͟ಠ",
        "ノಠ_ಠノ",
        "(¬_¬)",
        "(｀ε´)",
        "(｀Д´)",
        "(ಠ⌣ಠ)",
        "(◣_◢)",
        "(¬▂¬)",
        "(┳◇┳)",
        "(눈_눈)",
        "(¬､¬)",
        "(`A´)",
        "（▽д▽）",
        "-`д´-",
        "(’益’)",
        "(⋋▂⋌)",
        "〴⋋_⋌〵",
        "(◔ д◔)",
        "☜(`o´)",
        "(ʘдʘ╬)",
        "（♯▼皿▼）",
        "(#｀皿´)",
        "(╬ಠ益ಠ)",
        "(ಠ ∩ಠ)",
        "ლಠ益ಠ)ლ",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val BadMood: List<CharSequence> = listOf(
        "（￣s￣；",
        "（￣ε￣）",
        "( ￣＾￣)",
        "(´ﾟзﾟ)",
        "(;´д｀)",
        "（＞μ＜＃）",
        "(´･з･)",
        "('ε'*)",
        "(ｰ ｰ;)",
        "(´･･`)",
        "(ó﹏ò｡)",
        "(・ε・｀*)",
        "(´･д･｀)",
        "…φ(。。*)",
        "(。・ε・。)",
        "(´･_･｀)",
        "( *｀з´)",
        "(*･ε･*)",
        "( *ﾟзﾟ)",
        "(´-ε-｀)",
        "(´･ε･｀)",
        "(-公- ;)",
        "(・´з`・)",
        "(・ε・`*)",
        "(*・ε・*)",
        "(･ε･｀ )",
        "(=｀.´=)",
        "(￣ε(#￣)",
        "(´･ｪ･｀)",
        "(●´^｀●)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Bear: List<CharSequence> = listOf(
        "・㉨・",
        "తꀧత",
        "ᵔᴥᵔ",
        "ʕ•ᴥ•ʔ",
        "ʕ·ᴥ·ʔ",
        "ˁ˙˟˙ˀ",
        "❃ႣᄎႣ❃",
        "ʕ　·ᴥʔ",
        "ʕᴥ·　ʔ",
        "ʕథ౪థʔ",
        "ʕ￫ᴥ￩ʔ",
        "(๏㉨๏)",
        "(ó㉨ò)",
        "ʢᵕᴗᵕʡ",
        "ʕ◉ᴥ◉ʔ",
        "ʕᴥ• ʔ",
        "ʕ≧ᴥ≦ʔ",
        "ʕ•㉨•ʔ",
        "ʕ≧㉨≦ʔ",
        "(✪㉨✪)",
        "ʕ∙ჲ∙ʔ",
        "ʕʽɞʼʔ",
        "[｡◉㉨◉]",
        "ʕº̫͡ºʔ",
        "ʕ·ᴥ·　ʔ",
        "ʕ*̫͡*ʔ",
        "ʕ•̮͡•ʔ",
        "ᶘ ᵒᴥᵒᶅ",
        "ʕ•̠͡•ʔ",
        "|ｴ)･)⊃",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Beg: List<CharSequence> = listOf(
        "○几",
        "＿|￣|○",
        "人´∀｀)",
        "(￣十￣)",
        "(-m-)",
        "(；人；)",
        "Ω＼ζ゜）",
        "(mm*)",
        "(￣人￣)",
        "(uωu人)",
        "(-人-)",
        "（＾人＾）",
        "(^人^)",
        "(/∇≦*)",
        "（×÷×）人",
        "(人･∀･)",
        "(ﾟ∀ﾟ人)",
        "(」ﾟДﾟ」",
        "((_　_*",
        "（人･ω･)",
        "|･ω･)ﾉ",
        "(人ゝд∩)",
        "(人・ェ・)",
        "（－||－）",
        "(人εﾟ●)",
        "(人ФｴФ)",
        "人´･皿･)",
        "ヽ(-Д-◎",
        "(人ゝω・）",
        "(人ﾟ∀ﾟ)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Blush: List<CharSequence> = listOf(
        "＠＾▽＾＠",
        "(´ω｀*)",
        "(‘-’*)",
        "(´∀｀•)",
        "(ﾉ∀`♥)",
        "(/ε＼*)",
        "(*^^*)",
        "(*^_^*)",
        "(*^.^*)",
        "(•ﾟдﾟ•)",
        "(*ﾟ∀ﾟ*)",
        "(^-^*)ノ",
        "(・´ｪ｀・)",
        "(*´ω｀*)",
        "(*´_ゝ｀)",
        "(*´ｪ｀*)",
        "(*´∀`*)",
        "(*ﾟｪﾟ*)",
        "(*ﾉ∀`*)",
        "(*´∀｀*)",
        "( *∵* )",
        "(〃￣ω￣〃ゞ",
        "(*ﾟｰﾟ)ゞ",
        "(●´艸｀)ヾ",
        "v(・∀・*)",
        "v(^∀^*)",
        "(*´-｀*)",
        "(*´台｀*)",
        "(*´I`*)",
        "(*≧∀≦*)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Cat: List<CharSequence> = listOf(
        "ὃ⍜ὅ",
        "ㅇㅅㅇ",
        "චᆽච",
        "ऴिाी",
        "(ꀄꀾꀄ)",
        "ฅ•ω•ฅ",
        "(ꅈꇅꅈ)",
        "(ꀂǒꀂ)",
        "(ꃪꄳꃪ)",
        "=ටᆼට=",
        "ʘ̥ꀾʘ̥",
        "=ộ⍛ộ=",
        "^ↀᴥↀ^",
        "โ๏∀๏ใ",
        "(ΦωΦ)",
        "ミ๏ｖ๏彡",
        "ि०॰०ॢी",
        "(ฅ'ω'ฅ)",
        "(=ↀωↀ=)",
        "=^∇^*=",
        "(⁎˃ᆺ˂)",
        "(ㅇㅅㅇ❀)",
        "ฅ(≚ᄌ≚)",
        "(^･ｪ･^)",
        "§ꊘ⃑٥ꊘ⃐§",
        "(=‘ｘ‘=)",
        "(^-人-^)",
        "(=①ω①=)",
        "(=ＴェＴ=)",
        "(=ｘェｘ=)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Confused: List<CharSequence> = listOf(
        "ఠ_ఠ",
        "◔_◔",
        "●.◉",
        "(^^ゞ",
        "ಠ_ರೃ",
        "℃ↂ_ↂ",
        "عربى",
        "ɾ◉⊆◉ɹ",
        "(。ヘ°)",
        "(⊙_☉)",
        "(＾＾；)",
        "(☉_☉)",
        "(♠_♦)",
        "(ﾟｰﾟ;",
        "(C_C)",
        "(⊙_◎)",
        "(゜-゜)",
        "(◑○◑)",
        "(・・；)",
        "⁀⊙﹏☉⁀",
        "(゜。゜)",
        "(・・)",
        "(´エ｀；)",
        "(‘◇’)",
        "（・∩・）",
        "(・∧‐)ゞ",
        "(⊙＿⊙)",
        "(◎_◎;)",
        "(●__●)",
        "(ﾟヘﾟ)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Cry: List<CharSequence> = listOf(
        "أ‿أ",
        "╥﹏╥",
        "(;﹏;)",
        "(ToT)",
        "(┳Д┳)",
        "(ಥ﹏ಥ)",
        "（；へ：）",
        "(T＿T)",
        "（πーπ）",
        "(Ｔ▽Ｔ)",
        "(⋟﹏⋞)",
        "（ｉДｉ）",
        "(´Д⊂ヽ",
        "(;Д;)",
        "（>﹏<）",
        "(TдT)",
        "(つ﹏⊂)",
        "༼☯﹏☯༽",
        "(ノ﹏ヽ)",
        "(ノAヽ)",
        "(╥_╥)",
        "(T⌓T)",
        "(༎ຶ⌑༎ຶ)",
        "(☍﹏⁰)｡",
        "(ಥ_ʖಥ)",
        "(つд⊂)",
        "(≖͞_≖̥)",
        "(இ﹏இ`｡)",
        "༼ಢ_ಢ༽",
        "༼ ༎ຶ ෴ ༎ຶ༽",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Cute: List<CharSequence> = listOf(
        "ʕ￫ᴥ￩ʔ",
        "٩◔̯◔۶",
        "U^ｴ^U",
        "ʕ·ᴥ·ʔ",
        "ʕ•ᴥ•ʔ",
        "(ˇ⊖ˇ)",
        "༼☯﹏☯༽",
        "^ↀᴥↀ^",
        "(◕ᴥ◕)",
        "ʕ⊙ᴥ⊙ʔ",
        "(´﹃｀)",
        "༼ꉺɷꉺ༽",
        "(✿ヘᴥヘ)",
        "ʕ￫ᴥ￩　ʔ",
        "(✿╹◡╹)",
        "(▰∀◕)ﾉ",
        "(人◕ω◕)",
        "(ㆁᴗㆁ✿)",
        "(ﾉ≧ڡ≦)",
        "ʕ　·ᴥ·ʔ",
        "(≖ᴗ≖✿)",
        "(◕‿◕✿)",
        "（๑♜д♜）",
        "(✾♛‿♛)",
        "(*бωб)",
        "(ᇴ‿ฺᇴ)",
        "(๑￫ܫ￩)",
        "(❍ᴥ❍ʋ)",
        "ʕ·ᴥ·　ʔ",
        "(✪‿✪)ノ",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Dance: List<CharSequence> = listOf(
        "└|∵┌|",
        "|┐∵|┘",
        "(ノ‥)ノ",
        "|o∵|o",
        "ح˚௰˚づ",
        "o|∵o|",
        "(/・・)ノ",
        "ヾ(^ ^ゞ",
        "(o^^)o",
        "o(^^o)",
        "ヾ(^^ゞ)",
        "(ノ・・)ノ",
        "(ノ^o^)ノ",
        "(ノ￣ー￣)ノ",
        "(ノ￣ω￣)ノ",
        "⌎⌈╹우╹⌉⌍",
        "(ﾉ･o･)ﾉ",
        "(ﾉ･ｪ･)ﾉ",
        "┌(☆o★)┘",
        "└|ﾟεﾟ|┐",
        "(ﾉ≧∀≦)ﾉ",
        "(ﾉﾟ▽ﾟ)ﾉ",
        "┌|ﾟзﾟ|┘",
        "┌(メ▼▼)┘",
        "（〜^∇^)〜",
        "⌌⌈╹므╹⌉⌏",
        "＼(^ω^＼)",
        "१|˚–˚|५",
        "(〜￣△￣)〜",
        "〜(꒪꒳꒪)〜",
        "┏(‘▀_▀’)ノ♬♪",
        "ヾ(*´ ∇ `)ﾉ",
        "ヽ(⌐■_■)ノ♪♬",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Depressed: List<CharSequence> = listOf(
        "（◞‸◟）",
        "(´∵｀)",
        "|ω・｀)",
        "|ω･`)",
        "(-д-；)",
        "从´_υ｀从",
        "（ノд｀＠）",
        "(ﾉε｀◎)",
        "(ﾉω･｀o)",
        "（ー○ー）＝３",
        "(・´з`・)",
        "(´･ω･｀)",
        "(´・ω・｀)",
        "(∥￣■￣∥)",
        "(´-ω-`)",
        "(ｏ´_｀ｏ)",
        "(´･仝･｀)",
        "(*ノз`*)",
        "(っ´ω｀c)",
        "(￣σ･･￣)",
        "…φ(。。*)",
        "(´・＿・`)",
        "(´ﾟωﾟ｀)",
        "(lll-ω-)",
        "(_　_|||)",
        "(*´Д｀)=з",
        "(´‐ω‐）=з",
        "( ◢д◣)",
        "(* _ω_)…",
        "…ρ(･ω`･､)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Devil: List<CharSequence> = listOf(
        "ಠﭛಠ",
        "(｀∀´)Ψ",
        "(◣∀◢)ψ",
        "ψ(｀∇´)ψ",
        "Ψ(☆ｗ☆)Ψ",
        "(｀㊥益㊥)Ψ",
        "｀(^▼^)´↑",
        "Ψ(｀∀´#)ﾉ",
        "↑_(ΦwΦ;)Ψ",
        "ψ(^Ф∀Ф^)ψ",
        "^（｀ω´ ）^ψ",
        "^(#｀∀´)_Ψ",
        "◥(ฅº￦ºฅ)◤",
        "Ψ( ｀▽´ )Ψ",
        "ƪ(`▿▿▿▿´ƪ)",
        "⁞⁝•ֱ̀␣̍•́⁝⁞",
        "←~∋(｡Ψ▼ｰ▼)∈",
        "Ψ(`_´ #  )↝",
        "↜(╰ •ω•)╯ψ",
        "Ψ(Φ皿Φ)))～††",
        "←～（o ｀▽´ )oΨ",
        "Ψ (‘益’#    )↝",
        "∋━━o(｀∀´oメ）～→",
        "↜(͛ ꒪͒৫͏̈́꒪͒)͛⌰",
        "∋━━o(｀∀´oメ）～→━━",
        "((( ←～（o ｀▽´ )oΨ",
        "(◞≼◉ื≽◟ ;益;◞≼◉ื≽◟)Ψ",
        "━━╋⊂（　´ー｀）彡Ψ(ΦД| |Φ;)Ψ",
        "^(#｀∀´)_Ψ････・･†_(ﾟｰﾟ*)β",
        "†_(･”･*)β（（　　)β ^(#｀∀´)_Ψ",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Disappointed: List<CharSequence> = listOf(
        "orz",
        "(´Д⊂",
        "（πーπ）",
        "('A`)",
        "(ન_੦)",
        "(´д｀)",
        "（；＿；）",
        "(´ω｀)",
        "(´ж｀;)",
        "つ´Д`)つ",
        "（ノд｀＠）",
        "从´_υ｀从",
        "ヽ(冫、)ﾉ",
        "(i々i)］",
        "(;´д｀)",
        "(ノ_<。)",
        "( p_q)",
        "(´･ω･`)",
        "o(；△；)o",
        "( ｉдｉ )",
        "(´・ω・｀)",
        "(*ノ_<*)",
        "(´；ω；｀)",
        "ヽ(´Д`;)ﾉ",
        "(；一ω一||)",
        "(_　_|||)",
        "Σ(￣ロ￣lll)",
        "＿ﾉ乙(､ﾝ､)＿",
        "///orz///",
        "（（（(T-T*)）））",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Drool: List<CharSequence> = listOf(
        "＾ｐ＾",
        "(^p^）",
        "(^q^)",
        "(‘u’)",
        "(￣￢￣)",
        "（＾q＾）",
        "(º﹃º)",
        "(ﾟ￢ﾟ)",
        "(´ρ`)",
        "(゜￢゜)",
        "(^￢^)",
        "（゜ρ゜）",
        "(。・ρ・)",
        "(¯﹃¯*)",
        "(･ﾟρﾟ)",
        "（｡･ρ･）",
        "(*´﹃`)",
        "(ﾟρﾟ*)",
        "（’┓`*）",
        "(￣￢￣*)",
        "(｡･ρ･)",
        "(⌒￢⌒*)",
        "(´┓`*)",
        "ԅ(♡﹃♡ԅ)",
        "(@￣ρ￣@)",
        "(*´﹃｀*)",
        "ԅ(º﹃ºԅ)",
        "ԅ(¯﹃¯ԅ)",
        "(＠￣￢￣＠)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Eat: List<CharSequence> = listOf(
        "―●○◎-",
        "―⊂ZZZ⊃",
        "（￣ｗ￣）Ψ",
        "◥█̆̈◤࿉∥",
        "(＾-＾)＿日",
        "(。・・)_且",
        "(＃´ー´)旦",
        "且_(・_・ )",
        "(　ﾟДﾟ)⊃旦",
        "( -_-)旦~",
        "(*^◇^)_旦",
        "(*･∀･)_Ω~",
        "~旦_(^O^ )",
        "(　 ゜Д゜)⊃旦",
        "~~旦⊂(･∀･ )",
        "ｰ( ￣▽)_皿~~",
        "(*｀▽´)_旦~~",
        "~~旦_(･o･;)",
        "~(=^‥^)_旦~",
        "且_(ﾟ◇ﾟ；)ノﾞ",
        "(*´ｪ｀*)っ旦~",
        "( ・・)つ-●●●",
        "( ^-^)_旦””",
        "((((´∀｀)＿旦～",
        "( ´･ω･`)_且~",
        "(*´-ω)o旦~┏┓",
        "(*´・ω)o旦~┏┓",
        "~~匸Pヽ(･ω･｀)",
        "(○^ω^)_旦~~♪",
        "~~旦_(-ω-｀｡)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Evil: List<CharSequence> = listOf(
        "ಠﭛಠ",
        "(｀ε´)",
        "（｀ー´）",
        "` ͜ʖ´",
        "(☼Д☼)",
        "(｀▽´)",
        "(｀∀´)Ψ",
        "（　｀ハ´）",
        "(｀Д´*)",
        "| ｀Д´|",
        "ψ`ー´)ﾉ",
        "ﾍ(｀▽´*)",
        "p(｀ε´q）",
        "ψ(｀∇´)ψ",
        "(ʃƪ¬‿¬)",
        "ლ(｀∀´ლ)",
        "Ψ(｀▽´)Ψ",
        "（=｀〜´=）",
        "(=｀ω´=)",
        "ρ(｀.´)ρ",
        "ψ（｀Д´）ψ",
        "(ﾒ｀ﾛ´)/",
        "()`艸´()",
        "Ψ(￣∀￣)Ψ",
        "(・｀ω´・)",
        "(=｀ェ´=)",
        "(屮｀∀´)屮",
        "Ψ(｀◇´)Ψ",
        "o(｀ω´*)o",
        "(ц｀ω´ц*)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Excited: List<CharSequence> = listOf(
        "≧ω≦",
        "୧⍢⃝୨",
        "(⊙ᗜ⊙)",
        "โ๏∀๏ใ",
        "(≧∀≦)",
        "۹⌤_⌤۹",
        "୧☉□☉୨",
        "(⊙ꇴ⊙)",
        "(´∀`)",
        "（・ｗ・）",
        "(ᗒᗨᗕ)",
        "ʘ ͜ʖ ʘ",
        "(≧∇≦*)",
        "(*≧▽≦)",
        "۹(ÒہÓ)۶",
        "(ﾉ･ｪ･)ﾉ",
        "٩(^ᴗ^)۶",
        "б（＞ε＜）∂",
        "(⌬̀⌄⌬́)",
        "٩(θ‿θ)۶",
        "ヽ(＾Д＾)ﾉ",
        "(★^O^★)",
        "（๑✧∀✧๑）",
        "(*≧∀≦*)",
        "٩(●ᴗ●)۶",
        "⸍⚙̥ꇴ⚙̥⸌",
        "(๑>ᴗ<๑)",
        "۹(˒௰˓)۶",
        "(* >ω<)",
        "＼（Ｔ∇Ｔ）／",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val FallDown: List<CharSequence> = listOf(
        "_(:3」∠)_",
        "（＿□＿：）",
        "（＿Å＿）",
        "(o;＿ω＿)o",
        "(o_□_)o",
        "(o ><)o",
        "ヘ(＿　＿ヘ)",
        "o(>< o)",
        "(ヘ＿　＿)ヘ",
        "(o_0_)o))",
        "(ｏ＿　＿)ｏ",
        "(o_ _)o",
        "_(。_°/",
        "o(_ _o)",
        "ヽ(_ _ヽ)彡",
        "_(･＿．)/",
        "_:(´ཀ`」 ∠):_",
        "o(_ _o)ノ☆",
        "☆ヽ(o_ _)o",
        "ミ(ノ_ _)ノ",
        "ｏ(＿　＿ｏ)",
        "ε＝(。＿　＿)。",
        "ヽ(＿　＿ヽ)",
        "。。。(ノ＿　＿)ノ",
        "｡(＿　＿｡)＝3",
        "εミ(ο_ _)ο",
        "ο(_ _ο)彡3",
        "* ・・(o_ _)o",
        "o(_ _o)・・ *",
        "ε=ε=┏( >_<)┛　(ノ_ _)ノ",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Feces: List<CharSequence> = listOf(
        "ξ\"(￣ *)",
        "( ж)..ξ",
        "Σo(TξT)o",
        "ヽ( ・∀・)ノ●",
        "●ヽ(ﾟ∀ﾟ)ﾉ●",
        "(･･*)ﾉ ⌒ξ",
        "(・・*)ノ ⌒ξ",
        "-=≡~ξ-＿-*)",
        "(゜д゜(：＊：)=з",
        "~ξヾ( ^-x-^)",
        "●ヽ(´･д･`)ﾉ●",
        "（ﾉ･∀･）ﾉ = ●",
        "(;￣y￣)-----cξ~~",
        "( ･∀･)つ＝≡≡ξ)Д`)",
        "ヽ(･∀･)ﾉヽ(･∀･)ﾉ●●",
        "(￣y￣)o――――――∞Cξ~",
        "~ξ.．・((ヾ( ^-x-^)",
        "●_(ﾟ∀ﾟ )≡　ヽ(Ａ`)ﾉ≡",
        "●ヽ(ﾟ∀ﾟヽ)♪♪(ノﾟ∀ﾟ)ノ●",
        "( ;・_・)ﾉＸＸＸＸＸＸＸＸ=Cξ",
        "━━━━━━━ ~~~ξ-＼ξ(･_＼)",
        "ξ━‥・・・☆＼_(゜▽゜*彡*゜ー゜)_/",
        "ξ━‥･･･☆＼_(ﾟ▽ﾟ*彡*ﾟｰﾟ)_/",
        "／ー￣)/D・・・・・------ξ゜⊿゜)",
        "ξ＼(ﾟｰﾟ*)(*ﾟ▽ﾟ)ﾉ⌒ξﾟДﾟ)ﾉﾉ",
        "／ｰ￣)/D・・・・・------ξﾟ⊿ﾟ)ﾉ",
        "ξ＼(゜ー゜*)(*゜▽゜)ノ⌒ξ゜Д゜)ノノ",
        "~ξ(*--)(*･･)ﾉ v⌒v⌒v⌒v⌒ξ~",
        "ヽ(･∀･)ﾉ●ヽ(･∀･)ﾉ●ヽ(･∀･)ﾉ●",
        "(￣~￣;)ξ~ (((( ￣∇￣)_ξﾟ□ﾟ)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Feminine: List<CharSequence> = listOf(
        "ಠ_ಠ",
        "ʕ•ᴥ•ʔ",
        "ʕ￫ᴥ￩ʔ",
        "(•ө•)♡",
        "( ′～‵)",
        "(ꐦ°д°)",
        "(☝◞‸◟)☞",
        "(○´―`)ゞ",
        "(⌍་д་⌌)",
        "(๑´ㅂ`๑)",
        "(ฅΦωΦ)ฅ",
        "(๑°⌓°๑)",
        "( ･ὢ･ )",
        "(･◡ु‹ )",
        "(ง `ω´)۶",
        "ԅ( ˘ω˘ԅ)",
        "(๑•̆૩•̆)",
        "(๑•́ω•̀)",
        "꒰✩’ω`ૢ✩꒱",
        "ヽ( ε∀ε )ノ",
        "(๑˃̵ᴗ˂̵)و",
        "(๑˃́ꇴ˂̀๑)",
        "(∩`ω´)⊃))",
        "(* >ω<)=3",
        "((⊂(`ω´∩)",
        "ω･)و ̑̑༉⑩",
        "(´･ε･̥ˋ๑)",
        "٩(๑`н´๑)۶",
        "(♡ >ω< ♡)",
        "_(┐「ε:)_❤",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val FlipTable: List<CharSequence> = listOf(
        "(ﾉ；；)ﾉ~┻━┻",
        "┬─┬ノ(ಠ_ಠノ)",
        "(/-o-)/ ⌒ ┤",
        "┻━┻ミ＼（≧ロ≦＼）",
        "（ノ○Д○）ノ＝＝＝┠",
        "(ﾉ｀□´)ﾉ⌒┻━┻",
        "(／‵Д′)／~ ╧╧",
        "(╯°▽°)╯ ┻━┻",
        "(╯ಠ_ಠ）╯︵ ┳━┳",
        "(ノಠ益ಠ)ノ彡┻━┻",
        "(┛◉Д◉)┛彡┻━┻",
        "(╯ಠ‿ಠ)╯︵┻━┻",
        "(ノ#--)ノ＼。゜。",
        "(╯=▃=)╯︵┻━┻",
        "༼ノ◕ヮ◕༽ノ︵┻━┻",
        "(┛ಠДಠ)┛彡┻━┻",
        "(ﾉಠдಠ)ﾉ︵┻━┻",
        "(╯°Д°)╯ ┻━┻",
        "(ノ-_-)ノ~┻━┻",
        "┳━┳ノ( OωOノ)",
        "(╯‵□′)╯︵┴─┴",
        "(ノToT)ノ ~┻┻",
        "┬───┬ ノ༼ຈل͜ຈノ༽",
        "(ノ͡° ͜ʖ ͡°)ノ︵┻┻",
        "ʕノ•ᴥ•ʔノ ︵ ┻━┻",
        "ヽ༼ ツ ༽ﾉ ︵┻━┻",
        "ヽ༼ຈل͜ຈ༽ﾉ︵┻━┻",
        "༼ﾉຈل͜ຈ༽ﾉ︵┻━┻",
        "┬━┬ノ(▀̿̿Ĺ̯̿̿▀̿ ̿ノ)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Flower: List<CharSequence> = listOf(
        "≧❀‿❀≦",
        "(◕︿◕✿)",
        "(ʘ‿ʘ✿)",
        "(◕ㅁ◕✿)",
        "(◕д◕✿)",
        "(〃‿〃✿)",
        "(≖︿≖✿)",
        "(◕▿◕✿)",
        "(◕ㅅ◕✿)",
        "(◡‿◡✿)",
        "(◕ω◕✿)",
        "(◕ᴗ◕✿)",
        "(/‿＼✿)",
        "(✿◠‿◠)",
        "（❁▿❁＊）",
        "(◠‿◠✿)",
        "(◕‿◕✿)",
        "(✿ヘᴥヘ)",
        "❁◕ ‿ ◕❁",
        "✿◕ ‿ ◕✿",
        "(◕__◕✿)",
        "(◕‸ ◕✿)",
        "(◕⍸ ◕✿)",
        "❀◕ ‿ ◕❀",
        "✾◕ ‿ ◕✾",
        "(✿☯‿☯✿)",
        "(ʘ‿ʘ)ノ✿",
        "(˶◕‿◕˶✿)",
        "(◕◞౪◟◕✿)",
        "乁༼☯‿☯✿༽ㄏ",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Funny: List<CharSequence> = listOf(
        "〓D",
        "❐‿❑",
        "ರ_ರ",
        "ಥ◡ಥ",
        "ಥ_ಥ",
        "ತಎತ",
        "ಠ益ಠ",
        "ಠoಠ",
        "ಠ◡ಠ",
        "ಠ▃ಠ",
        "☉_☉",
        "ಠ~ಠ",
        "ಠ.ಠ",
        "◮_◮",
        "ಠ_ಠ",
        "ಠ_๏",
        "◪_◪",
        "ఠ_ఠ",
        "ↁ_ↁ",
        "◜㍕◝",
        "◙‿◙",
        "◘_◘",
        "இ_இ",
        "ਉ_ਉ",
        "◔̯◔",
        "◔_◔",
        "●_●",
        "◉︵◉",
        "أ‿أ",
        "◉_◉",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Glasses: List<CharSequence> = listOf(
        "▼ω▼",
        "ಠ_ರೃ",
        "(▼▼)",
        "(▼∀▼)",
        "凸（◆◆メ",
        "(⌐■_■)",
        "(ﾒ▼_▼)",
        "(▼O▼ﾒ)",
        "(‡▼益▼)",
        "|*▼皿▼)",
        "(▼-▼*)",
        "(╭ರ_⊙)",
        "（♯▼皿▼）",
        "(⌐▨_▨)",
        "(▼皿▼#)",
        "（■Д■*）",
        "Σ(▼□▼ﾒ)",
        "(ｷ▼O▼)/",
        "(｡▼皿▼)σ",
        "ヽ(▼皿▼ヽ)",
        "(ﾉ▼皿▼)ﾉ",
        "ヾ(●ε●)ノ",
        "ヾ(▼ﾍ▼；)",
        "щ(▼ﾛ▼щ)",
        "ヽ(▼ｰ▼ｷ)",
        "(つ▀¯▀)つ",
        "┌(メ▼▼)┘",
        "┌(▼▼メ)┘",
        "༼⌐■ل͟■༽",
        "(ｷ▼⊿▼)ﾉ",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Grin: List<CharSequence> = listOf(
        "（´υ｀）",
        "(￣▼￣)",
        "(ﾟｰﾟ)",
        "(´ｖ｀)",
        "(･∀･)",
        "（☆∀☆）",
        "(￣ー￣)",
        "(・∀・)",
        "(｀ω´)",
        "(　￣ー)",
        "┫￣旦￣┣",
        "Ｕ^皿^Ｕ",
        "（＿ー＿）",
        "(▼∀▼)",
        "（■皿■）",
        "（￣ー＋￣）",
        "(☆>⊇<)",
        "｜*￣∇￣｜",
        "(￣▼￣*)",
        "(｡-∀-)",
        "（*ﾟーﾟ）",
        "v(￣∇￣)",
        "（＿ー+＿）",
        "（￣+ー￣）",
        "(´、ゝ｀)",
        "（´－｀）ノ",
        "(・∀・｀；)",
        "(　´_ゝ`)",
        "(#~皿~#)",
        "（￣￣ー￣￣）",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Gross: List<CharSequence> = listOf(
        "（咒）",
        "ʕథ౪థʔ",
        "༼ꉺɷꉺ༽",
        "(亝ω亝｡)",
        "( ՞ਊ ՞)",
        "(✧≖‿ゝ≖)",
        "(⊙◞౪◟⊙)",
        "(´◑ω◐`)",
        "(´༎ຶ༎ຶ)",
        "（ ´థ౪థ）",
        "( ఠൠఠ )",
        "(╬♛ 益♛ )",
        "(⑅∫°ਊ°)∫",
        "(;; @益@）",
        "(́◉◞౪◟◉)",
        "ʅ（ ‾⊖◝）ʃ",
        "(｡☉౪ ⊙｡)",
        "✌(◔౪◔ )✌",
        "(΄◞ิ౪◟ิ‵)",
        "( ≖ิ‿≖ิ )",
        "༽΄◞ิ౪◟ิ‵༼",
        "（´≝◞⊖◟≝｀)",
        "(☄ฺ♛ฺ3♛ฺ)",
        "(´ﾟ◞౪◟ﾟ｀)",
        "ʅ(◔౪◔ ) ʃ",
        "( ☞◔ ౪◔)☞",
        "༼;´༎ຶ ༎ຶ༽",
        "＼(´◓Д◔`)／",
        "( ≖ิൠ≖ิ )",
        "(´⊙◞⊱◟⊙｀)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Happy: List<CharSequence> = listOf(
        "ɷ◡ɷ",
        "꒡ꆚ꒡",
        "⊙▽⊙",
        "ʘ‿ʘ",
        "മ◡മ",
        "◉‿◉",
        "≖‿≖",
        "◙‿◙",
        "ȏ.̮ȏ",
        "(≧▽≦)",
        "（ꉺᗜꉺ）",
        "（＾ω＾）",
        "（＾ｖ＾）",
        "(￣个￣)",
        "〔´∇｀〕",
        "(´∀`)",
        "⊂◉‿◉つ",
        "(＾ω＾)",
        "ヽ(ヅ)ノ",
        "（ꉺ౪ꉺ）",
        "(¬‿¬)",
        "(-‿◦)",
        "(•‿•)",
        "(─‿─)",
        "(◑‿◐)",
        "ღවꇳවღ",
        "｡^‿^｡",
        "´･ᴗ･`",
        "(ᗒᗨᗕ)",
        "(＾▽＾)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Heart: List<CharSequence> = listOf(
        "♱♡‿♡♰",
        "♡＾▽＾♡",
        "✿♥‿♥✿",
        "♡ඩ⌔ඩ♡",
        "༼♥ل͜♥༽",
        "(♡´艸`)",
        "⊆♥_㇁♥⊇",
        "(♥ω♥*)",
        "(•ө•)♡",
        "(●♡∀♡)",
        "˅ɞ♡⃛ʚ˅",
        "⊂（♡⌂♡）⊃",
        "(✿ ♥‿♥)",
        "(‘∀’●)♡",
        "ヽ(o♡o)/",
        "(｡♥‿♥｡)",
        "(●´□`)♡",
        "ღゝ◡╹)ノ♡",
        "(♡´౪`♡)",
        "(人･㉨･)♡",
        "(๑♡⌓♡๑)",
        "ƪ(♥ﻬ♥)ʃ",
        "(๑♡3♡๑)",
        "♥(ˆ⌣ˆԅ)",
        "(灬♥ω♥灬)",
        "♡(ŐωŐ人)",
        "（´・｀ ）♡",
        "(⺣◡⺣)♡*",
        "♡´･ᴗ･`♡",
        "（♥￫ｏ￩♥）",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Hello: List<CharSequence> = listOf(
        "ヾ(＾∇＾)",
        "＼(￣O￣)",
        "(¬_¬)ﾉ",
        "(ノ^∇^)",
        "ヾ(☆▽☆)",
        "(/・0・)",
        "(^o^)/",
        "(￣▽￣)ノ",
        "(≧∇≦)/",
        "＼(-o- )",
        "(。･∀･)ﾉ",
        "＼(°o°；）",
        "川o･-･)ﾉ",
        "( ・_・)ノ",
        "( ･ω･)ﾉ",
        "( ^_^)／",
        "（ ゜ρ゜)ノ",
        "( ﾟ▽ﾟ)/",
        "(;-_-)ノ",
        "(。-ω-)ﾉ",
        "(。^_・)ノ",
        "(｡´∀｀)ﾉ",
        "(*＾▽＾)／",
        "(*￣Ｏ￣)ノ",
        "ヾ(＾-＾)ノ",
        "(^-^*)/",
        "＼(-_- )",
        "ヾ(´￢｀)ﾉ",
        "ヾ(・ω・ｏ)",
        "(=ﾟωﾟ)ﾉ",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Helpless: List<CharSequence> = listOf(
        "(ㆆᴗㆆ)",
        "-`д´-",
        "(ﾟ⊿ﾟ)",
        "(´c_`)",
        "(´_ゝ`)",
        "(　◜◡‾)",
        "(‾◡◝　)",
        "(´･_･`)",
        "╮(╯_╰)╭",
        "( º﹃º )",
        "( ˘･з･)",
        "(´ﾟдﾟ`)",
        "┐(´д`)┌",
        "(´,_ゝ`)",
        "_(┐「ε:)_",
        "Σ(｀L_｀ )",
        "＿ﾉ乙(､ﾝ､)＿",
        "(๑•́ ₃ •̀๑)",
        "(´-ι_-｀)",
        "| 　 ´ω｀|φ",
        "(・ε・`*) …",
        "凹(´･ω･｀)凹",
        "(ｏ´・ε・｀ｏ)",
        "ο（´･ω･｀o）",
        "ρ(´-＿-｀●)",
        "(o´・ω・｀)ﾉ",
        "↓↓(%;´п`Ⅲ)",
        "…_φ(･ω･` )",
        "(・ω・｀)………..",
        "(´･ω･)…｡oо○",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Hide: List<CharSequence> = listOf(
        "|д･)",
        "|ω・）",
        "｜。・）",
        "｜ｏ゜）",
        "|ω`)",
        "|ｮз☆)",
        "|⁰⊖⁰)",
        "|ω･`)",
        "(⊃‿⊂)",
        "|ｮдﾟ)",
        "┃(・ω┃",
        "|_-｡)",
        "|Д´)/",
        "ﾍ(･_|",
        "|Д｀|┛",
        ")ु੭ु⁾",
        ")Д⊙`)",
        "|∀･)ジ",
        "｜−・;）",
        "|x･`)",
        "|ｴ)･)⊃",
        "|´∀｀●)",
        "|д꒪ͧ)…",
        "|ʘ‿ʘ)╯",
        "|･ω･｀)",
        "|ω´･;)",
        "|･x･`)",
        "|ω-o)ﾟ",
        "|ω・｀)ノ",
        "|*▼皿▼)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Hug: List<CharSequence> = listOf(
        "⊂（♡⌂♡）⊃",
        "⊂(◉‿◉)つ",
        "ლ(・ヮ・ლ)",
        "(つ◉益◉)つ",
        "⊂(・﹏・⊂)",
        "⊂(・ヮ・⊂)",
        "⊂(・▽・⊂)",
        "(っಠ‿ಠ)っ",
        "ʕっ•ᴥ•ʔっ",
        "（っ・∀・）っ",
        "(っ⇀⑃↼)っ",
        "＼(^o^)／",
        "(つ´∀｀)つ",
        "(つ▀¯▀)つ",
        "(っ´▽｀)っ",
        "ლ(・﹏・ლ)",
        "⊂(･ω･*⊂)",
        "ლ(･ω･*ლ)",
        "(づ￣ ³￣)づ",
        "ლ(´ ❥ `ლ)",
        "c⌒っ╹v╹ )っ",
        "d=(´▽｀)=b",
        "⊂( ◜◒◝ )⊃",
        "(.づ◡﹏◡)づ.",
        "(っ*´∀｀*)っ",
        "(っ⇀`皿′↼)っ",
        "(.づσ▿σ)づ.",
        "⊂(´・ω・｀⊂)",
        "(*￣-(-*)ゝ",
        "⊂((・▽・))⊃",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Kiss: List<CharSequence> = listOf(
        "ㄖꏁㄖ",
        "ᴓᴈᴓ",
        "|°з°|",
        "(ΦзΦ)",
        "˶⚈Ɛ⚈˵",
        "（＿ε＿）",
        "(‘ε’)",
        "⁽˙³˙⁾",
        "(-ε- )",
        "•́ε•̀٥",
        "(☆´3｀)",
        "(・ε・｀)",
        "(ΘεΘ;)",
        "(≡ε≡；)",
        "（￣ε￣＠）",
        "(´ε｀*)",
        "（*＾3＾）",
        "(*￣з￣)",
        "(○ﾟε^○)",
        "（。ˇ ⊖ˇ）",
        "（○゜ε＾○）",
        "|(￣3￣)|",
        "ヾ(´〓｀)ﾉ",
        "(~￣³￣)~",
        "(ΘεΘʃƪ)",
        "（￣ε￣ʃƪ）",
        "（＠ーεー＠）",
        "(*-(　　)",
        "(๑♡3♡๑)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Laugh: List<CharSequence> = listOf(
        "(खਉख)",
        "(ಡ艸ಡ)",
        "（⌒▽⌒）",
        "（＾ｖ＾）",
        "（＞ｙ＜）",
        "(＾艸＾)",
        "(Ŏ艸Ŏ)",
        "(亝艸亝)",
        "(♡´艸`)",
        "(●´艸`)",
        "(≧艸≦*)",
        "(*>艸<)",
        "( ਊдਊ)",
        "( ´艸｀)",
        "(｡ˇ艸ˇ)",
        "(o>艸<)",
        "(^ц^ )",
        "(☆Θ艸Θ)",
        "（○´艸｀）",
        "(*´艸｀)",
        "（≧ｙ≦＊）",
        "(*・艸・)",
        "（　´∀｀）",
        "(*≧艸≦)",
        "( ╹ਊ╹)",
        "( ՞ਊ՞)",
        "(*´∀｀）",
        "(✪ฺܫ✪ฺ)",
        "( 〃´艸｀)",
        "(❤ฺ￫艸￩)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val LennyFace: List<CharSequence> = listOf(
        "( ͡° ͜ʖ ͡°)",
        "( ͡ ͜ʖ ͡ )",
        "( ͡~ ͜ʖ ͡°)",
        "( ͡ʘ╭͜ʖ╮͡ʘ)",
        "( ͡☉ ͜ʖ ͡☉)",
        "( ͡⚆ ͜ʖ ͡⚆)",
        "( ͡~ ͜ʖ ͡~)",
        "( ͡ຈ ͜ʖ ͡ຈ)",
        "( ͡° ʖ̯ ͡°)",
        "( ͡ಠ ʖ̯ ͡ಠ)",
        "( ͠° ͟ʖ ͡°)",
        "( ͡°╭͜ʖ╮͡° )",
        "( ͡^ ͜ʖ ͡^ )",
        "( ͡ຈ╭͜ʖ╮͡ຈ )",
        "( ͡ᵔ ͜ʖ ͡ᵔ )",
        "( ͝סּ ͜ʖ͡סּ)",
        "ヽ( ͝° ͜ʖ͡°)ﾉ",
        "(ง ° ͜ ʖ °)ง",
        "(つ ͡° ͜ʖ ͡°)つ",
        "(☞ ͡° ͜ʖ ͡°)☞",
        "ᕦ( ͡° ͜ʖ ͡°)ᕤ",
        "ᕕ( ͡° ͜ʖ ͡°)ᕗ",
        "( ʘ̆ ╭͜ʖ╮ ʘ̆ )",
        "( ͡° ͜ʖ ͡°)=ε✄",
        "╚═( ͡° ͜ʖ ͡°)═╝",
        "┴┬┴┤( ͡° ͜ʖ├┬┴┬",
        "(ノ͡° ͜ʖ ͡°)ノ︵┻┻",
        "¯\\_( ͠° ͟ʖ °͠ )_/¯",
        "╰( ͡° ͜ʖ ͡° )つ──☆*:・ﾟ",
        "(∩ ͡ ° ʖ ͡ °) ⊃-(===>",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Love: List<CharSequence> = listOf(
        "♡＾▽＾♡",
        "✿♥‿♥✿",
        "♡ඩ⌔ඩ♡",
        "♱♡‿♡♰",
        "˖◛⁺⑅♡",
        "(•ө•)♡",
        "༼♥ل͜♥༽",
        "˅ɞ♡⃛ʚ˅",
        "(♥ω♥*)",
        "(´∀｀)♡",
        "(●♡∀♡)",
        "⊆♥_㇁♥⊇",
        "(♡´艸`)",
        "♥（ﾉ´∀`）",
        "(๑♡⌓♡๑)",
        "(´⌣`ʃƪ)",
        "(‘∀’●)♡",
        "(♡´౪`♡)",
        "( ˘ ³˘)",
        "(´ε｀ )♡",
        "(⺣◡⺣)♡*",
        "ღゝ◡╹)ノ♡",
        "ヽ(o♡o)/",
        "(人･㉨･)♡",
        "(๑♡3♡๑)",
        "(ღ˘⌣˘ღ)",
        "ƪ(♥ﻬ♥)ʃ",
        "(灬♥ω♥灬)",
        "⊂（♡⌂♡）⊃",
        "♡(ŐωŐ人)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Magic: List<CharSequence> = listOf(
        "(`･Д･)ノ=☆",
        "(*｀□)<炎炎炎炎",
        "★≡≡＼（`△´＼）",
        "彡ﾟ◉ω◉ )つー☆*",
        "(∩^o^)⊃━☆゜.*",
        "(ﾉ◕ヮ◕)ﾉ*:･ﾟ✧",
        "(☆_・)・‥…━━━★",
        "(∩｀-´)⊃━炎炎炎炎炎",
        "ପ(⚈᷉ʙ⚈᷉)੭̸୫൦⃛",
        "✩°｡⋆⸜(ू｡•ω•｡)",
        "炎炎炎炎☆┣o(･ω･ )",
        "੭•̀ω•́)੭̸*✩⁺˚",
        "( °-°)シ ミ★ ミ☆",
        "(σ'∀')σ*。・゜+.*",
        "(っ・ω・）っ≡≡≡≡≡≡☆",
        "(ﾉ≧∀≦)ﾉ・‥…━━━★",
        "(੭•̀ω•́)੭̸*✩⁺˚",
        "(∩｀-´)⊃━✿✿✿✿✿✿",
        "ヽ༼ຈل͜ຈ༽⊃─☆*:・ﾟ",
        "( ◔ ౪◔)⊃━☆ﾟ.*・",
        "￡(*’ο’）/☆*。;+，",
        "(੭ˊ͈ ꒵ˋ͈)੭̸*✧⁺˚",
        "(*’▽’)ノ＾—==ΞΞΞ☆",
        "(∩｡･ｏ･｡)っ.ﾟ☆｡'`",
        "(∩^o^)⊃━☆ﾟ.*･｡ﾟ",
        "༼つಠ益ಠ༽つ ─=≡ΣO))",
        "(つ◕౪◕)つ━☆ﾟ.*･｡ﾟ",
        "(*ﾟー^)/'`*:;,．★",
        "(∩｀-´)⊃━☆ﾟ.*･｡ﾟ",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val MakeUpMyMind: List<CharSequence> = listOf(
        "(・∀・)",
        "(`ω´)",
        "(´ｰ+｀)",
        "(￣･ω･￣)",
        "(*＾∀ﾟ)ъ",
        "(ฅ`ω´ฅ)",
        "(`･ω･´)",
        "ヾ(ﾟｪﾟゞ)",
        "(｀･ω･´)",
        "(๑ÒωÓ๑)",
        "(`・ω・´)",
        "|｀･ω･)9",
        "o(｀*ω*´)",
        "( ｰ`дｰ´)",
        "(+･｀⊇･)b",
        "(　･`ω･´)",
        "(｀･ω･´)+",
        "(｀・ω・´)b",
        "( +･｀ω･)b",
        "ヾ(｀・ω・´)ノ",
        "(｡+･｀ω･´)",
        "(｀･ω･´) ｂ",
        "(・`ω´・ ●)",
        "d( ･ω´･+)",
        "(｡+･`ω･´)",
        "（σ｀・∀・´）σ",
        "m9っ`･ω･´)",
        "（　･`ー･´） +",
        "o.(+･`ω･+).o",
        ".*:ﾟ（｀・ω・´）ゝﾟ:*.",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val MiddleFinger: List<CharSequence> = listOf(
        "凸ಠ益ಠ)凸",
        "t(=n=)",
        "凸(¬‿¬)",
        "凸(>皿<)凸",
        "凸(｀0´)凸",
        "凸(｀△´＋）",
        "凸(⊙▂⊙ )",
        "凸(-0-メ)",
        "༼凸 ◉_◔༽凸",
        "凸(｀⌒´メ)凸",
        "凸༼ຈل͜ຈ༽凸",
        "t(- n -)t",
        "凸(｀ι _´メ）",
        "凸(^▼ｪ▼ﾒ^)",
        "༼✿◕ᗜ◕༽┌∩┐",
        "୧༼ಠ益ಠ╭∩╮༽",
        "╭∩╮(⋋‿⋌)ᕗ",
        "୧༼◔益◔╭∩╮༽",
        "( ︶︿︶)_╭∩╮",
        "t( -_- t )",
        "┌П┐(►˛◄’!)",
        "┌∩┐(◕◡◉)┌∩┐",
        "╭∩╮(ಠ۝ಠ)╭∩╮",
        "╭∩╮༼☯۝☯༽╭∩╮",
        "╭∩╮（︶︿︶）╭∩╮",
        "╭∩╮◕ل͜◕)╭∩╮",
        "凸〳 ಥ ڡ ಥ 〵凸",
        "╭∩╮ʕ•ᴥ•ʔ╭∩╮",
        "凸( •̀_•́ )凸",
        "╭∩╮(-_-)╭∩╮",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Monkey: List<CharSequence> = listOf(
        "⊆◍益◍⊇",
        "@・ꈊ・@",
        "₢ຈ▿ຈꀣ",
        "☾ठ ੁठ☽",
        "⊆（⌒◎⌒）⊇",
        "@(・●・)@",
        "Ⴚტ◕‿◕ტჂ",
        "₢⦿͡㍕⦿͡ꀣ",
        "@(･-･)@",
        "⊆ಠ ω ಠ⊇",
        "@(･o･)@",
        "@(ᵕ.ᵕ)@",
        "@(･ェ･)@",
        "└@(･ｪ･)@┐",
        "@( o･ｪ･)@",
        "@( o･ꎴ･)@",
        "⊂((・⊥・))⊃",
        "@( oóꎴò)@",
        "⊂((υ⊥υ))⊃",
        "⊂((*＞⊥σ))⊃",
        "⊂((。・o・))⊃",
        "⊂((≧⊥≦))⊃",
        "₢⦿͡ ˒̫̮ ⦿͡ꀣ",
        "Ϛ⃘๑•͡ .̫•๑꒜",
        "Ϛ⃘๑•͡ .̫•๑꒜",
        "○Ｏo。.@(-ェ-)@ノ",
        "✧.*◌·͡˔·ོ◌*·✧",
        "Ϛ⃘๑•͡ .̫•๑꒜ღ⃛",
        "Ϛ⃘๑•͡ .̫•๑꒜♬♫",
        "⸉ᘓ◎⃝ᆺ◎⃝ᘐ⸊",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Music: List<CharSequence> = listOf(
        "(o・★)",
        "(☆￢o)q",
        "(^_^♪)",
        "(´△｀)♪",
        "ρ(o＜★)",
        "ρ(o＾★)",
        "(☆￣o)q",
        "(☆∩o)q",
        "(☆≧o)q",
        "(☆Θo)q",
        "(´0｀)q",
        "ρ(oμ★)",
        "（＾Ｏ＾☆♪",
        "（＾3＾）~♪",
        "（*´▽｀*）",
        "ρ（ーoー)♪",
        "（^Ｏ^）～♪",
        "ρ(o δ★)",
        "ρ(＾o^)♪",
        "ρ（^o^）♪",
        "ρ（＾o＾）♪",
        "♫꒰･◡･๑꒱",
        "(o^^o)♪",
        "♫♪˙‿˙♫♪",
        "♪(ﾉε｀●)",
        "ρ(^^ )♭",
        "♪～(￣ε￣)",
        "♪(´ε｀ )",
        "（＊＾ω＾）♪",
        "≧(´▽｀)≦",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Nervious: List<CharSequence> = listOf(
        "◑.◑",
        "⚆ᗝ⚆",
        "●﹏●",
        "⊙﹏⊙",
        "⊙△⊙",
        "˚▱˚",
        "ଵ˛̼ଵ",
        "(￣□￣)",
        "(-｡-;",
        "(ーー;)",
        "（／．＼）",
        "（/｡＼)",
        "(ﾟдﾟ)",
        "(O∆O)",
        "ゞ◎Д◎ヾ",
        ")Д⊙`)",
        "（ΩДΩ）",
        "(／。＼)",
        "(⊃д⊂)",
        "(☍﹏⁰)",
        "(･д･)",
        "(ⅈ▱ⅈ)",
        "(๏д๏)",
        "(¤﹏¤)",
        "《ﾟДﾟ》",
        "๑ΘдΘ๑",
        "ミ●﹏☉ミ",
        "(⊃‿⊂)",
        "(ノдヽ)",
        "(꒪⌓꒪)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val PeaceSign: List<CharSequence> = listOf(
        "|-^)v",
        "(^^)v",
        "(^_^)v",
        "(^_-)v",
        "(^-^)v",
        "(^ー^)ｖ",
        "（＾コ＾）V",
        "(-_☆)V",
        "(*^^)v",
        "✌('ω')",
        "(^o^)v",
        "v(￣ｰ￣)v",
        "y(^ｰ^)y",
        "(￣▽￣)V",
        "y(￣ー￣)y",
        "(=￣▽￣=)Ｖ",
        "Λ(＿Δ＿)Λ",
        "( v￣▽￣)",
        "v(｡･･｡)",
        "(*^-ﾟ)v",
        "v(´∀｀*v)",
        "(○ﾟε＾○)v",
        "v(｡･ω･｡)",
        "v(*'-^*)ｂ",
        "( =￣+∇￣=)v",
        "♪v('∇'*)⌒☆",
        "✌三✌('ω')✌三✌",
        "✌三(✌'ω')✌三✌",
        "ｖ(⌒ｏ⌒)ｖ",
        "v(≧∇≦v)三(v≧∇≦)v",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Proud: List<CharSequence> = listOf(
        "（咒）",
        "(⌤⌗)",
        "(￣^￣)",
        "(-、-)",
        "(꒵꜅꒵)",
        "(｀へ′)",
        "（’へ’）",
        "╭⚈¬⚈╮",
        "(￣ω￣)",
        "(｀ڼ´)",
        "⚈ ̫ ⚈",
        "（￣へ￣）",
        "（￣＾￣）",
        "(´꒳`)",
        "(꒡ꜙ꒡)",
        "(^～^)",
        "(´Å｀)",
        "§ԾᴗԾ§",
        "（￣ー￣）",
        "(｀^´)",
        "（・―・）",
        "(￣‥￣)",
        "(￣ー￣)",
        "（｀ー´）",
        "(￣⊿￣)",
        "(-∀-)",
        "( ´ｰ`)",
        "（；￣︶￣）",
        "(￣︶￣;)",
        "( ⊙‿⊙)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Punch: List<CharSequence> = listOf(
        "ｏ(≧▼≦○〃",
        "o(・_・)9",
        "σ～ (｀´メ",
        "@=(--@v)",
        "o(･Θ･)○☆",
        "o(￣ｰ￣)○☆",
        "o(￣ ◇￣)○",
        "o( -_-)9@",
        "ｏ(メ・・)=日☆",
        "|c==(-T )",
        "☆○(*σ。σ)o",
        "(　･ω･)っ≡つ",
        "(ﾟoﾟC=(__;",
        "(°o°C=(_ _;",
        "∑(ﾟoﾟC=(__;",
        "(((c=(ﾟﾛﾟ;q",
        "α～(´｀d)",
        "(;´0｀)ﾂ))□｀)",
        "(=ﾟωﾟ)つ)ﾟ∀ﾟ)",
        "(p_･q)(p･_q)",
        "Ｃ≡(・。・Ｃ≡)≡≡≡",
        "☆(゜o°(○=(-_-;",
        "(*＇Д＇)ﾉｼ)ﾟﾛﾟ)",
        "ﾍ(｡｡ﾍ)☆ヽ(^^;)",
        "(pﾟﾛﾟ)==p)`д)",
        "☆(ﾟoﾟ(○=(-_-○",
        "o(・ロ・)○()o×)/",
        "(*ﾟｰﾟ)=○)ﾟＯﾟ)",
        "( ‘д‘⊂彡☆))Д´)",
        "○（｀・ω・）＝＝○ノД）",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Rabbit: List<CharSequence> = listOf(
        "˚ᆺ˚",
        "(′⅄‵)",
        "U・x・U",
        "(•ㅅ•)",
        "(ㅇㅅㅇ❀)",
        "( ･×･)",
        "（ ÒㅅÓ)",
        "(⁎˃ᆺ˂)",
        "(๏ᆺ๏υ)",
        "(๑╹ᆺ╹)",
        "／(・x・)＼",
        "⌒(・x・)⌒",
        "U｡･.･｡U",
        "U╹ x ╹U",
        "／(=∵=)＼",
        "U(•ㅅ•)U",
        "(´・×・｀)",
        "○(･x･)○",
        "(=‘ｘ‘=)",
        "⁽˙̄˟˙̄⁾",
        "(๑òᆺó๑)",
        "⁽⁽˙˟˙⁾⁾",
        "(´･×･`)",
        "⌒(•ㅅ•)⌒",
        "(乂☉ｪ☉=)",
        "(╹ૅ×╹ૅ)",
        "￣(•ㅅ•)￣",
        "⌒(=∵=)⌒",
        "/(•ㅅ•)\\",
        "U(ㅇㅅㅇ❀)U",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val RogerThat: List<CharSequence> = listOf(
        "(≧∀≦ゞ",
        "(-ω-ゞ",
        "(≧ω≦)ゞ",
        "(｀-´)>",
        "∠(｀∪´)",
        "|`Д´)＞",
        "(≧∇≦)b",
        "(・∀-d)",
        "(`Д´)ゞ",
        "|▼皿▼)b",
        "(・∧‐)ゞ",
        "(●・ω・)b",
        "ｄ(´▽｀*)",
        "(*゜－＾)ゞ",
        "(°∀°)ゝ”",
        "(*｀Ω´)b",
        "(＞Д＜)ゝ”",
        "(=ﾟ▽ﾟ)/",
        "('∀`)ゝ”",
        "( ｀д´)b",
        "d(￣▽￣o)",
        "(*>ω<)b",
        "(｀∀´)ゝ”",
        "d(´･ω･`)",
        "(*´ω｀*)ノ",
        "(★´ω｀★)ゞ",
        "(●´･∀･)b",
        "d(*ﾟーﾟ*)",
        "☆(･ω･*)ゞ",
        "(●⌒∇⌒●)b",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val RollOver: List<CharSequence> = listOf(
        "(o_△_)o",
        "/(_-_)ｌ",
        "(:3_ヽ)_",
        "_(:3」∠)_",
        "_(┐「ε:)_",
        "_(:3｣∠)_",
        "(:3 _ )=",
        "_(┐「ε:)_♡",
        "ヽ(:3ﾉ ヽ)ﾉ",
        "ヾ(:3ﾉｼヾ)ﾉｼ",
        "_(：3 」∠ )_",
        "_/￣|(冫、)-c",
        "(　( (((＿⊿＿)",
        "_(:D｣┌)⁼³₌₃",
        "((└(:3」┌)┘))",
        "(:3っ)っ -=三[]",
        "○)))ﾍ(^･･^=)~",
        "((o_△_)o)^▽^;)",
        "(￣∇￣;)))(　((((;＿⊿＿)",
        "（o°▽°)o(o_△_)o(o°▽°)o",
        "(((.-.)(:I )(ﾟ‐ﾟ)( I:)",
        "((((((‥)(: )(¨)( :)(*‥)",
        "(┐「ε:)_三┌(.ω.)┐三_(:3 」∠)_",
        "(..)(･.)(: )(¨)( :)(.･)(..)",
        "o_ _)o(o- -)o(o°▽°)o(o_△_)o(o_ _)o.。o○",
        "(°o°)(°o。)(。o。)(。o°)(°o°)(°o。)(。o。)(。o°)",
        "(.-.)(:I )(゜-゜)( I:) (.-.)(:I )(゜-゜)( I:)",
        "(((((;___▲___))(((((;___▲___))((￣▼￣ ;)))))",
        "三('ω')三( ε: )三(.ω.)三( :3 )三('ω')三( ε: )三(.ω.)三( :3 )",
        "('ω') 三 ( ε: ) 三 (. .) 三 ( :з ) 三 ('ω') 三 ( ε: ) 三 (. .) 三 ｡･*･:≡(    ε:)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Run: List<CharSequence> = listOf(
        "┗(＾0＾)┓",
        "ᕕ┌◕ᗜ◕┐ᕗ",
        "┏┃*･д┃┛",
        "ᕕ( ᐛ )ᕗ",
        "ᕕ(ಥʖ̯ಥ)ᕗ",
        "ᕕ( ಠ‿ಠ)ᕗ",
        "ᕕ༼✪ل͜✪༽ᕗ",
        "┌( ಠ‿ಠ)┘",
        "ღ(◔ڼ◔ღ)ミ",
        "ᕕ( ◎_◎)ᕗ",
        "ᕕ(╯°□°)ᕗ",
        "｢(◔ω◔「)三",
        "┌( ಠ_ಠ)┘",
        "٩(•౪•٩)三",
        "ᕕ༼ຈل͜ຈ༽ᕗ",
        "ᕕ(◉Д◉ )ᕗ",
        "ᕕ( ◔3◔)ᕗ",
        "┗(^o^　)┓三",
        "┌（・Σ・）┘≡З",
        "｡｡゛(ﾉ><)ﾉ",
        "ε＝（ﾉﾟдﾟ）ﾉ",
        "｢(⑅◔ω◔「)三",
        "┏( ゜)ਊ゜)┛",
        "ε＝┏(･ω･)┛",
        "ᕕ(⌐□ل͜□)ᕗ",
        "⊂(ﾟДﾟ;⊂⌒`つ",
        "ᕕ༼✿•̀︿•́༽ᕗ",
        "ε=٩(●❛ö❛)۶",
        "ε≡(ノ´＿ゝ｀）ノ",
        "ε=(｡ﾉ･ω･)ﾉ",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Sad: List<CharSequence> = listOf(
        "⊙︿⊙",
        "ಠ⌣ಠ",
        "╥﹏╥",
        "ಥ_ಥ",
        "●︿●",
        "⊛ठ̯⊛",
        "ಠ╭╮ಠ",
        "(ㄒoㄒ)",
        "(Ｔ▽Ｔ)",
        "(︶︹︺)",
        "（ｉДｉ）",
        "（；へ：）",
        "(╥_╥)",
        "(T⌓T)",
        "（´＿｀）",
        "(T＿T)",
        "(;﹏;)",
        "(ToT)",
        "(┳◇┳)",
        "(T_T)",
        "(ಥ﹏ಥ)",
        "(个_个)",
        "(⋟﹏⋞)",
        "(ノ﹏ヽ)",
        "(┳Д┳)",
        "༶ඬ༝ඬ༶",
        "(‘A`)",
        "（πーπ）",
        "(◕︿◕✿)",
        "(つ﹏<。)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Salute: List<CharSequence> = listOf(
        "(-ω-ゞ",
        "(｀∇´ゞ",
        "(´∀｀ゞ",
        "(≧∀≦ゞ",
        "(￣ー￣)ゞ",
        "く（＠Д＠）",
        "(‾-ƪ‾)",
        "(‘-‘*ゞ",
        "∠(´д｀)",
        "(＞Д＜)ゝ",
        "(｀д´)ゝ",
        "(￣^￣)ゞ",
        "(-ω-)ゝ",
        "（・д・ゝ）",
        "(`Д´)ゞ",
        "∠(^ー^)",
        "(￣▽￣)ゞ",
        "(゜◇゜)ゞ",
        "(・∧‐)ゞ",
        "(＞ロ＜)ゝ",
        "(≧ω≦)ゞ",
        "(^-^)ゝ",
        "(‘∀`)ゞ",
        "（─∀─）ゞ",
        "('-'*ゞ",
        "（＾∀＾）ゞ",
        "（・∀・）ゞ",
        "（’◇’）ゞ",
        "ヾ(≧∇≦)ゞ",
        "ヽ|･◇･|ゞ",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Scared: List<CharSequence> = listOf(
        "（ΩДΩ）",
        "(O∆O)",
        "ゞ◎Д◎ヾ",
        "(⊃д⊂)",
        "(ノдヽ)",
        "(⊃‿⊂)",
        "(/ω＼)",
        "(／。＼)",
        "（/｡＼)",
        "（／．＼）",
        "（／_＼）",
        "(゜Д゜*)",
        "(ﾟДﾟ;)",
        "§;ﾟﾛﾟ§",
        "(꒪ȏ꒪;)",
        "(☼Д☼)",
        "( ﾉД`)",
        "(-@Д@)",
        "(ﾟДﾟ；∬",
        "⊂（゜Д゜⊂",
        "⊃゜Д゜）⊃",
        "（´皿｀；）",
        "(＠O＠;)",
        "( ⁰д⁰)",
        ") ゜o゜(",
        "(ノ′Дヾ)",
        "(　〇□〇）",
        "(/;◇;)/",
        "џ(ºДºџ)",
        "ヽ(ﾟДﾟ)ﾉ",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Sheep: List<CharSequence> = listOf(
        "Ꮚ⌀ꈊ⍉Ꮚ",
        "@^ェ^@",
        "Ꮚ⁰ꈊ⁰Ꮚ",
        "（・ｴ・@",
        "Ꮚ｀ꈊ´Ꮚ",
        "§・ω・§",
        "Ꮚ’ꈊ’Ꮚ",
        "＠・＊・＠",
        "Ꮚ`ꈊ´Ꮚ",
        "ᏊˊꈊˋᏊ",
        "Ꮚ⁼ꈊ⁼Ꮚ",
        "Ꮚ˟ꈊ˟Ꮚ",
        "＠・ω・＠",
        "@・ェ・@",
        "Ꮚ^ꈊ^Ꮚ",
        "Ꮚ❛ꈊ❛Ꮚ",
        "ᏊᵋꈊᵋᏊ",
        "ᏊꈍꈊꈍᏊ",
        "Ꮚ˘ꍓ˘Ꮚ",
        "Ꮚ•ꈊ•Ꮚ",
        "{ @ˊꈊˋ@ }",
        "{ @⁼ꈊ⁼@ }",
        "{ @ᵕꈊᵕ@ }",
        "Ꮚᵒ̴̶̷ꈊ˂̤Ꮚ",
        "{ @˟ꈊ˟@ }",
        "{ @⁰ꈊ⁰@ }",
        "{ @^ꈊ^@ }",
        "{ @❛ꈊ❛@ }",
        "{ @｀ꈊ´@ }",
        "{ @’ꈊ’@ }",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Shocked: List<CharSequence> = listOf(
        "(゜ロ゜)",
        "；￣ロ￣）",
        "（￣□￣；）",
        "(ﾟωﾟ;)",
        "Σ(･口･)",
        "Σ(T□T)",
        "(ﾟдﾟ；)",
        "(●Ω●;)",
        "(￣■￣;)",
        "(_□_；)",
        "(ʘᗩʘ’)",
        "（∂△∂；）",
        "(◯Δ◯∥)",
        "(ʘ言ʘ╬)",
        "Σ(ﾟÅﾟ)",
        "(゜Д゜;)",
        "Σ(ﾟДﾟ)",
        "(ー∀ー；)",
        "Σ(ＴωＴ)",
        "�(ﾟ□ﾟ*川",
        "(;Ⅲ□Ⅲ;)",
        "（￣□||||",
        "（*￣□￣*；",
        "Σ(‐△‐●)",
        "Σ(▼□▼ﾒ)",
        "(∩╹□╹∩)",
        "ΣΣ(ﾟДﾟ;)",
        "Σ(`･ω･Ⅲ)",
        "∑(ΦдΦlll",
        "＝(￣□￣;)⇒",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Shrug: List<CharSequence> = listOf(
        "┐(´д｀)┌",
        "┐(´～｀)┌",
        "┐(´ー｀)┌",
        "┐(￣ヘ￣)┌",
        "╮(╯∀╰)╭",
        "╮(╯_╰)╭",
        "┐(´д`)┌",
        "┐(´∀｀)┌",
        "ʅ(́◡◝)ʃ",
        "ლ(ﾟдﾟლ)",
        "┐(ﾟ～ﾟ)┌",
        "┐('д')┌",
        "ლ｜＾Д＾ლ｜",
        "ლ（╹ε╹ლ）",
        "ლ(ಠ益ಠ)ლ",
        "┐(‘～`;)┌",
        "ヘ(´－｀;)ヘ",
        "┐( -“-)┌",
        "乁༼☯‿☯✿༽ㄏ",
        "ʅ（´◔౪◔）ʃ",
        "ლ(•ω •ლ)",
        "ヽ(゜～゜o)ノ",
        "ヽ(~～~ )ノ",
        "┐(~ー~;)┌",
        "┐(-。ー;)┌",
        "¯\\_(ツ)_/¯",
        "¯\\_(⊙_ʖ⊙)_/¯",
        "乁ʕ •̀ ۝ •́ ʔㄏ",
        "¯\\_༼ ಥ ‿ ಥ ༽_/¯",
        "乁( ⁰͡  Ĺ̯ ⁰͡ ) ㄏ",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Shy: List<CharSequence> = listOf(
        "(^^ゞ",
        "(〃▽〃)",
        "(ノ▽〃)",
        "（/｡＼)",
        "(/ω＼)",
        "(Ŏ艸Ŏ)",
        "(^^;)",
        "(〃ー〃)",
        "(〃ω〃)",
        "(〃艸〃)",
        "(´つヮ⊂)",
        "(♡´艸`)",
        "(／≧ω＼)",
        "ʕ*ﾉᴥﾉʔ",
        "(/へ＼*)",
        "(*ﾉ▽ﾉ)",
        "(*ﾉωﾉ)",
        "(*ﾉдﾉ)",
        "(´～｀ヾ)",
        "(ﾉ∇≦*)",
        "(‘-’*)",
        "(^◇^；)",
        "|▽//)ゝ",
        "(〃´∀｀)",
        "ꈍ .̮ ꈍ",
        "(〃∀〃)ゞ",
        "( 〃．．)",
        "(｡･･｡)",
        "|´∀｀●)",
        "6(\"ー )",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Sleep: List<CharSequence> = listOf(
        "【:εω",
        "(冫༵、)",
        "(ᴗ˳ᴗ)",
        "(´～`)",
        "( ⓥωⓥ)",
        "(:˒[￣]",
        "(*-ω-)",
        "(︶｡︶✽)",
        "(:3ぅ　)",
        "(¦ꒉ[▓▓]",
        "(¦ꀦ[▓▓]",
        "⌈▓͟⌉ꆟ)ꍞ",
        "（;´_ヘ;）",
        "（´○｀）～ゝ",
        "(¦ꃎ[▓▓]",
        "(¦ꎌ[▓▓]",
        "(¦ꃆ[▓▓]",
        "(¦ꄰ[▓▓]",
        "⌈▒͟⌉ꅼ)ꍞ",
        "＼（´Ｏ｀）／",
        "（◎´〇｀◎）",
        "(´-εヾ )",
        "(｡し_し｡)",
        "(｡´-д-)",
        "(*´ο`*)",
        "川｡μ_μ)σ",
        "(｡v_v｡)",
        "(๑ᵕ⌓ᵕ̤)",
        "(¦ꃩ[▓▓]",
        "꒰◍ᐡᐤᐡ◍꒱",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Smile: List<CharSequence> = listOf(
        "＾ω＾",
        "▼ω▼",
        "(´∀｀）",
        "（＾∀＾）",
        "(^○^)",
        "(｀▽´)",
        "米＾－＾米",
        "(∩_∩)",
        "(⌒∇⌒)",
        "(☆▽☆)",
        "(￣∇￣)",
        "（￣ー+￣）",
        "σ(^○^)",
        "(^■^*)",
        "(*^-^)",
        "d(^^*)",
        "(´w｀*)",
        "|*￣ー￣|",
        "{*≧∀≦}",
        "(o^^o)",
        "(o^∀^)",
        "(*´ー`)",
        "o(^▽^)o",
        "o(^-^)o",
        "(*´∇｀*)",
        "（*´▽`*)",
        "(=^_^=)",
        "σ(ﾟｰ^*)",
        "（●＞ω＜●）",
        "y（^ヮ^）y",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Sparkle: List<CharSequence> = listOf(
        "（☆ω☆*）",
        "☆=(ゝω･)/",
        "(。・艸-。)-☆",
        "(★≧▽^))★☆",
        "＼(★^∀^★)／",
        "(*○’3`)★+ﾟ",
        "(*＞ｖ＜)ゞ*゜+",
        "(艸′v'★*)。+",
        "+.(*'v`*)+",
        "(〇*>∀<)ゞ★☆",
        ".+(´^ω^`)+.",
        "(☆uεu☆)ZZzz",
        "(★O∀O*)◇+｡",
        "・+(*゜∀゜*)+・",
        "ﾟ*｡(･∀･)ﾟ*｡",
        "°+(*´∀｀)ｂ°+°",
        "☆*ヾ(-∀・*)*+☆",
        "ﾟ.+(〃ﾉωﾉ)ﾟ.+°",
        "(n’∀’)ηﾟ*｡:*!",
        "＋。゜~”（゜∀゜）゜。＋",
        "ﾐ☆( *uωu人)+ﾟ.",
        "｡ﾟ+.(･∀･)ﾟ+.ﾟ",
        "ヾ(*′○`)ﾟ.+:｡ﾟ☆",
        "+｡ﾟφ(ゝω・｀○)+｡ﾟ",
        "ヾ(‘∀｀=ヽ)※．；，゜☆",
        "｡+ﾟ.。+。(´ω｀*)♪♪",
        "(●o’∪`o)ノ―♪`*.+",
        "☆*。★ﾟ*♪ヾ(☆ゝз・)ノ",
        "(人´∀｀)．☆．。．:*･°",
        "(*○゜∀。)/☆*。*.・+★",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Spin: List<CharSequence> = listOf(
        "(　・ω)(　・)(　)(・　)(ω・　)(・ω・)",
        "(･∀･)( ･∀)( ･)( )(･ )(∀･ )(･∀･)",
        "(･▽･)( ･▽)(　･)(　　)(･　)(▽･ )(･▽･)",
        "(^▽^)( ^▽)(　^)(　　)(^　)(▽^ )(^▽^)",
        "(^◇^)( ^◇)(　^)(　　)(^　)(◇^ )(^◇^)",
        "(^ー^)( ^ー)(　^)(　　)(^　)(ー^ )(^ー^)",
        "(^＿^)( ^_)(　^)(　　)(^　)(_^ )(^＿^)",
        "(ﾟーﾟ)( ﾟー)(　ﾟ)(　　)(ﾟ　)(ーﾟ )(ﾟーﾟ)",
        "(^_^)( ^_)(　^)(　　)(^　)(_^ )(^_^)",
        "(･_･)( ･_)(　･)(　　)(･　)(_･ )(･_･)",
        "(^∇^)( ^∇)(　^)(　　)(^　)(∇^ )(^∇^)",
        "(･∀･)( ･∀)(　･)(　　)(･　)(∀･ )(･∀･)",
        "(ﾟ◇ﾟ)( ﾟ◇)(　ﾟ)(　　)(ﾟ　)(◇ﾟ )(ﾟ◇ﾟ)",
        "(^∀^)( ^∀)(　^)(　　)(^　)(∀^ )(^∀^)",
        "(･◇･)( ･◇)(　･)(　　)(･　)(◇･ )(･◇･)",
        "(ﾟ▽ﾟ)( ﾟ▽)(　ﾟ)(　　)(ﾟ　)(▽ﾟ )(ﾟ▽ﾟ)",
        "(ﾟ∇ﾟ)( ﾟ∇)(　ﾟ)(　　)(ﾟ　)(∇ﾟ )(ﾟ∇ﾟ)",
        "(ﾟ∀ﾟ)( ﾟ∀)(　ﾟ)(　　)(ﾟ　)(∀ﾟ )(ﾟ∀ﾟ)",
        "(ﾟ＿ﾟ)( ﾟ_)(　ﾟ)(　　)(ﾟ　)(_ﾟ )(ﾟ＿ﾟ)",
        "(ﾟ_ﾟ)( ﾟ_)(　ﾟ)(　　)(ﾟ　)(_ﾟ )(ﾟ_ﾟ) 　",
        "(･∇･)( ･∇)(　･)(　　)(･　)(∇･ )(･∇･) 　",
        "(･＿･)( ･_)(　･)(　　)(･　)(_･ )(･＿･) 　",
        "‹‹\\(´ω` )/››‹‹\\( 　´)/››‹‹\\( ´ω`)/››",
        "‹‹ヽ( ･ω･ )/››‹‹ヽ( ･)/›› ‹‹ヽ( ･ω･ )/››",
        "(°o°)(°o。)(。o。)(。o°)(°o°)(°o。)(。o。)(。o°)",
        "ヽ(･∀･)ﾉ━(∀･ﾉ)━(･ﾉ )━ヽ( )ﾉ━( ヽ･)━(ヽ･∀)━ヽ(･∀･)ﾉ",
        "⊂⌒~⊃｡Д｡）⊃━⊂⌒O｡Д｡）⊃━O（｡Д｡）O━⊂（｡Д｡O⌒⊃━⊂（｡Д｡⊂~⌒⊃",
        "(=ﾟωﾟ)ﾉ━( =ﾟω)━( 　=ﾟ)━(　　)━(ﾟ= ﾉ )━(ωﾟ=ﾉ)━(=ﾟωﾟ)ﾉ",
        "<丶｀∀´>━<丶｀∀>━<　丶｀>━<　　丶>━<　　　>━<´　　　>━<∀´　　>━<丶｀∀´>",
        "(´･ω･`)━( ´･ω･)━( 　´･ω)━( 　　)━( 　　)━(ω･´　)━(･ω･´)━(｀･ω･´)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Surprised: List<CharSequence> = listOf(
        "⊙０⊙",
        "(¨!",
        "⊙▂⊙",
        "꒪ꄱ꒪",
        "◎ܫ◎",
        "（◎0◎）",
        "（○Ａ○）",
        "（´〇｀）",
        "(ﾟoﾟ)",
        "⑉ႣỏႣ⑉",
        "（゜◇゜）",
        "(இ௦இ)",
        "(・о・)",
        "(☼Д☼)",
        "（ФоФ)",
        "(☉∀☉)",
        "(○o○)",
        "（○□○）",
        "Σ(゜゜)",
        "(〇o〇；)",
        "(ʘ言ʘ╬)",
        "༼⁰o⁰；༽",
        "（・□・；）",
        "（°o°；）",
        "( ﾟoﾟ)",
        "Σ(꒪ȏ꒪)",
        "(⑉⊙ȏ⊙)",
        "(＃´Ｏ｀)",
        "Σ(T□T)",
        "(°o°:)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Sweat: List<CharSequence> = listOf(
        "(・・；)",
        "(￣ー￣；",
        "(＠Д＠；",
        "Σ(ﾟДﾟ；",
        "(；´瓜｀)",
        "(；・∀・)",
        "(；ﾟДﾟ)",
        "(￣Д￣；；",
        "(´∀｀；)",
        "(;^_^A",
        "(ﾟAﾟ;)",
        "(υ´Д｀)",
        "(ﾟДﾟ;)",
        "(-∧-；)",
        "(´ε｀；)",
        "(;´Д｀)",
        "(;ﾟдﾟ)",
        "(ﾟдﾟ；)",
        "（；^ω^）",
        "(´ж｀;)",
        "(;´д｀)",
        "(-。－；)",
        "(･Θ･;)",
        "(;￣ー￣川",
        "(；~〓~)",
        "（;￣ー￣A",
        "(^▽^;)",
        "(；´∀｀)",
        "(-”-;A",
        "(;´Д`)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val TakeABow: List<CharSequence> = listOf(
        "OTL",
        "orz",
        "_/＼○_",
        "●|￣|＿",
        "＿○／|＿",
        "＿|￣|●",
        "_l⌒l０",
        "_/＼●_",
        "○|￣|＿",
        "＿|￣|○",
        "m(＿＿)m",
        "＜(。_。)＞",
        "<(￢0￢)>",
        "<(．＿．)>",
        "m(_ _)m",
        "mＵTｪTＵm",
        "m(￢0￢)m",
        "へ(´д｀へ)",
        "o(_ _)o",
        "(シ_ _)シ",
        "(o_ _)o",
        "<(＿ ＿)>",
        "<(_ _)>",
        "m(._.)m",
        "(o。_。)o",
        "ヾ(_ _。）",
        "m(；∇；)m",
        "ｍ（＿　＿）ｍ",
        "≦(._.)≧",
        "ｍ（．＿．）ｍ",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val ThatsIt: List<CharSequence> = listOf(
        "σﾟﾛﾟ)σ",
        "(´ー`)σ",
        "(☞◑ω◑)☞",
        "(σ･ω･)σ",
        "(σ≧∀≦)σ",
        "(☞^o^)☞",
        "(σﾟ∀ﾟ)σ",
        "(m9^ω')",
        "m9っ`･ω･´)",
        "( ￣ー￣)σ",
        "(´-ω-)σ",
        "☜（ﾟ∀ﾟ☜）",
        "(つ >ω●)つ",
        "(σ*'3`)σ",
        "_(┐「ε:)_",
        "( ◑ω◑☞)☞",
        "(σ`・∀・)σ",
        "( ﾐΦﻌΦ)╭☞",
        "(σ´-ω-`)σ",
        "(╭☞'ω')╭☞",
        "(╭☞•́•̀)╭☞",
        "(╭☞•́ﾛ•̀)╭☞",
        "(╭☞• ⍛• )╭☞",
        "☜╮(´ิ∀´ิ☜╮)",
        "(╭☞•́⍛•̀)╭☞",
        "（╭☞•́⍛•̀)╭☞",
        "(╭☞•̀o•́)╭☞",
        "( ━☞´◔‿ゝ◔`)━☞",
        "(☞ ͡° ͜ʖ ͡°)☞",
        "(つ ͡° ͜ʖ ͡°)つ",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val ThumbsUp: List<CharSequence> = listOf(
        "(＾＾)ｂ",
        "(^^)ｂ",
        "d(-_^)",
        "d(⌒ー⌒)",
        "d(-_☆)",
        "(･ω･)b",
        "（´∀`）ｂ",
        "(￣ー￣)ｂ",
        "(b~_^)b",
        "(b^_^)b",
        "d(>_・ )",
        "d(>_< )",
        "(*TｰT)b",
        "b(~_^)d",
        "d(･∀･○)",
        "(*TーT)b",
        "(￣ε￣〃)ｂ",
        "d(ﾟｰﾟ@)",
        "d(>_･ )",
        "(o^-’)b",
        "( ﾟДﾟ)b",
        "ｄ(*￣o￣)",
        "d(￣◇￣)b",
        "(o^-')b",
        "(*^-ﾟ)b",
        "b(￣▽￣*)",
        "(*￣▽￣)d",
        "(　´∀｀)b",
        "(ｏ'ｖ｀ｂ)ｂ",
        "╭( ･ㅂ･)و",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Tired: List<CharSequence> = listOf(
        "ＯＴＬ",
        "ｏｒｚ",
        "＿ﾉフ○",
        "(￣Д￣",
        "(´Д⊂",
        "（－－；",
        "（´。｀)",
        "（￣Ω￣）",
        "(A´Å｀",
        "A^-^)",
        "(∋д∈)",
        "(・。-;",
        "（´・｀）",
        "(*Q*)",
        "(／０￣)",
        "＿|￣|○",
        "(-。-;",
        "(´Д｀)",
        "(;´Д｀)",
        "（＾。＾；）",
        "（´＿｀;）",
        "（；￣д￣）",
        "（´ヘ｀；）",
        "(´Д｀)ヾ",
        "(　〇□〇）",
        "(´ヘ｀;)",
        "(;・・;)",
        "（○o●;）",
        "(´皿｀;)",
        "(*ﾉω-)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Tremble: List<CharSequence> = listOf(
        "((´д｀))",
        "((；ﾟДﾟ)",
        "((;ﾟДﾟ))",
        "(llФｗФ｀)",
        "((ﾟДﾟ；))",
        "((；ﾟェﾟ；))",
        ":(´◦ω◦｀):",
        "(((＾ω＾)))",
        "（（（゜Д゜；）））",
        "（（（・×・；）））",
        "(((･Α･川)))",
        "((( ；ﾟДﾟ)))",
        "((,,´Θ`,,))",
        "((o(´∀｀)o))",
        "《《(ﾟc_ﾟ；)》》",
        ":;(∩´﹏`∩);:",
        "((((；ﾟДﾟ)))",
        "||lll´Д｀)))",
        "((((；ﾟДﾟ))))",
        "((ﾟﾟ((Д))ﾟﾟ))",
        "((((;´･ω･`)))",
        "(((( ˙-˙ ))))",
        "(･(･(･∀･)･)･)",
        "(((;ﾟ;Д;ﾟ;)))",
        "(((ﾟДﾟДﾟДﾟ)))",
        "（|||´□｀；）))))",
        "(((ﾉ)ﾟДﾟ(ヽ))))",
        "(((（´・ω・；`）)))",
        "((-ω-｡)(｡-ω-))",
        "(((((；＾ω＾)))))",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val TryMyBest: List<CharSequence> = listOf(
        "(･ω･)v",
        "(*ゝ∀･)v",
        "ヽ(ﾟ∀｡)ﾉ",
        "(●≧ω≦)9",
        "o(｀^´*)",
        "(★ｕдｕ)σ",
        "(〃-ー-)ﾉ",
        "(*・`д・)",
        "(●｀･皿･)",
        "(´_¨｀)9",
        "(￣`Д´￣)9",
        "(★-皿-★)9",
        "(`･ω･´)9",
        "v(●´皿｀)o",
        "(9｀･ω･)9",
        "╭( ･ㅂ･)و",
        "(`•ω•´๑)",
        "(｡o´д｀)o",
        "┗(｀･∀･´●)",
        "(๑•̀ㅁ•́ฅ✧",
        "o(-ε´･+)b",
        "(๑˃̵ᴗ˂̵)و",
        "(○｀･Д･´)9",
        "┗(｀・ω・´)┛",
        "【★´┏Д┓｀】ﾉ",
        "(ง •̀ω•́)ง✧",
        "( •̀ᄇ• ́)ﻭ✧",
        "( • ̀ω•́  )✧",
        "୧(๑❛ั⌔❛ั๑)୨ ॢ",
        "＼\\٩( 'ω' )و //／",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Unicode: List<CharSequence> = listOf(
        "గ౬గ",
        "♥‿♥",
        "ಠ_ಠ",
        "ʘ‿ʘ",
        "^̮^",
        "◕‿◕",
        "இ௰இ",
        "ઊઠઊ",
        "ꉨڡꉨ",
        "ꈿ۝ꈿ",
        "ஞ౩ஞ",
        "ب_ب",
        "ꆨ❥ꆨ",
        "ꆧεꆧ",
        "ꆤॄꆤ",
        "°Д°",
        "ઊહઊ",
        "ஞଲஞ",
        "⊙﹏⊙",
        "ʚ(•",
        "꒰⍨꒱",
        "(ت)",
        "(ق)",
        "༼⍨༽",
        "ఠ౬ఠ",
        "తꀧత",
        "චᆽච",
        "ಥ_ಥ",
        "◔̯◔",
        "◕‿↼",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Upset: List<CharSequence> = listOf(
        "(＾＾；)",
        "（￣ー￣；",
        "(⌒_⌒;",
        "(＞△＜Uu",
        "(;･∀･)",
        "（　´д｀）",
        "(；￣ー￣A",
        "(；´艸｀)",
        "(；゜○゜)",
        "(´∀｀；A",
        "｜￣ω￣A；",
        "（；・д・）",
        "(´Д｀ι)",
        "ヽ(´o｀；",
        "（；￣Д￣）",
        "（´ヘ｀；）",
        "(┼д┼;)",
        "（-Ⅱ-；）",
        "(x□ｘ｀;)",
        "(;′Д`)ノ",
        "(￣ー￣;)ゞ",
        "σ(￣∇￣;)",
        "(≧mm≦;)",
        "(*ﾉω<*)",
        "ε('∞'*)",
        "ε-(´・｀)",
        "ヾ(￣o￣;)",
        "ヾ(°∇°*)",
        "(●'Д'●)",
        "(；´д｀)ゞ",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Vomit: List<CharSequence> = listOf(
        "(хдх)",
        "（´＊｀）",
        "（≧ｍ≦）",
        "（＾～＾）",
        "(´π`)",
        "('A`)",
        "（＊Л＊）",
        "（●≧艸≦",
        "（>３<）三",
        "(;´Д`)",
        "( -.-)",
        "(￣x￣;)",
        "( ×m×)",
        "（･□･）川",
        "（´艸｀＊）",
        "＿|￣|○､;",
        "（。－<>ー。）",
        "(　´З｀)＝３",
        "（～Д～）＊＊＊",
        "σ(　'　┰￣)",
        "( ﾟ ３ﾟ)≡@",
        "（（（○∀○）））",
        "(；－з-)＝゜。",
        "((〇<*`_、′",
        "ΣΣΣΣΣ（０＜）",
        "（;ﾟ;艸;ﾟ;）",
        "｀．゜∵(゜∀゜)",
        "_(´ཀ`」 ∠)_",
        "(*●艸ЗU$)◆◇",
        "(o'ｪﾟ):;*.",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Weird: List<CharSequence> = listOf(
        "〠_〠",
        "༎ຶ‿༎ຶ",
        "(ΘLΘ)",
        "•✞_✞•",
        "ᕦ⊙෴⊙ᕤ",
        "ლↂ‿‿ↂლ",
        "(☉౪ ⊙)",
        "(╬⓪益⓪)",
        "( ఠൠఠ )",
        "☜Ҩↂ⼼ↂҨ☞",
        "(*☻-☻*)",
        "☁ ☝ˆ~ˆ☂",
        "༽つ۞﹏۞༼つ",
        "(´༎ຶ༎ຶ)",
        "（ ´థ౪థ）",
        "(╬ಠิ益ಠิ)",
        "( ◉◞౪◟◉)",
        "༼▃ Ĺ̯ ▃༽",
        "(༎ຶꈊ༎ຶ╬)",
        "(╬ﾟ◥益◤ﾟ)",
        "(☄ฺ♛ฺ3♛ฺ",
        "（☝ ՞ਊ ՞）☝",
        "( ༎ຶŎ༎ຶ )",
        "（´≝◞⊖◟≝｀)",
        "✌.ʕʘ‿ʘʔ.✌",
        "☾ ♛ ◡ ♛ ☽",
        "(╯⊙ ⊱ ⊙╰ )",
        "（ლ ^ิ౪^ิ）ლ",
        "( ´థ,_‥థ｀)",
        ";´༎ຶਊ ༎ຶ`;",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val Wink: List<CharSequence> = listOf(
        "^.~",
        "ಠ‿↼",
        "(･ｪ-)",
        "(・_＋)",
        "(・ω<)",
        "(^_-)",
        "｛・ω-*}",
        "(v^ー°)",
        "(*＾∀゜)",
        "(^_−)☆",
        "(･ω<)☆",
        "(๑◕ㅂ▰)",
        "d(-_^)",
        "(◕ฺー≦)ノ",
        "(*^-°)v",
        "(ﾉ･_-)☆",
        "く(^ｰﾟ)ﾉ",
        "(*＾∀ﾟ)ъ",
        "(⌒.−)＝★",
        "(^_-)-☆",
        "(^_<)～☆",
        "(๑ゝڡ◕๑)",
        "(・ωｰ)～☆",
        "(*^-ﾟ)v",
        "(*・∀-)☆",
        "(⌒.－)＝★",
        "(○ﾟε^○)",
        "(o'ｕ≦o)",
        "(*ゝω・)ﾉ",
        "(ﾟﾛ^o)o",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    object Named {
        /**
         * ```kaomoji
         * (* ^ ω ^)
         * ```
         */
        const val joy: String = """(* ^ ω ^)"""

        /**
         * ```kaomoji
         * (ﾉ´ з `)ノ
         * ```
         */
        const val love: String = """(ﾉ´ з `)ノ"""

        /**
         * ```kaomoji
         * (⌒_⌒;)
         * ```
         */
        const val confusion: String = """(⌒_⌒;)"""

        /**
         * ```kaomoji
         * (ノ_<。)ヾ(´ ▽ ` )
         * ```
         */
        const val sympathy: String = """(ノ_<。)ヾ(´ ▽ ` )"""

        /**
         * ```kaomoji
         * (＃＞＜)
         * ```
         */
        const val discontent: String = """(＃＞＜)"""

        /**
         * ```kaomoji
         * (＃`Д´)
         * ```
         */
        const val anger: String = """(＃`Д´)"""

        /**
         * ```kaomoji
         * (ノ_<。)
         * ```
         */
        const val sadness: String = """(ノ_<。)"""

        /**
         * ```kaomoji
         * ~(>_<~)
         * ```
         */
        const val pain: String = """~(>_<~)"""

        /**
         * ```kaomoji
         * (ノωヽ)
         * ```
         */
        const val fear: String = """(ノωヽ)"""

        /**
         * ```kaomoji
         * ヽ(ー_ー )ノ
         * ```
         */
        const val apathy: String = """ヽ(ー_ー )ノ"""

        /**
         * ```kaomoji
         * (￣ω￣;)
         * ```
         */
        const val embarrassment: String = """(￣ω￣;)"""

        /**
         * ```kaomoji
         * (￢_￢)
         * ```
         */
        const val doubt: String = """(￢_￢)"""

        /**
         * ```kaomoji
         * w(°ｏ°)w
         * ```
         */
        const val surprise: String = """w(°ｏ°)w"""

        /**
         * ```kaomoji
         * (*・ω・)ﾉ
         * ```
         */
        const val greeting: String = """(*・ω・)ﾉ"""

        /**
         * ```kaomoji
         * (づ￣ ³￣)づ
         * ```
         */
        const val hugs: String = """(づ￣ ³￣)づ"""

        /**
         * ```kaomoji
         * (^_~)
         * ```
         */
        const val wink: String = """(^_~)"""

        /**
         * ```kaomoji
         * (シ_ _)シ
         * ```
         */
        const val sorry: String = """(シ_ _)シ"""

        /**
         * ```kaomoji
         * (*￣ii￣)
         * ```
         */
        const val `blood from the nose`: String = """(*￣ii￣)"""

        /**
         * ```kaomoji
         * |･ω･)
         * ```
         */
        const val `hide and seek`: String = """|･ω･)"""

        /**
         * ```kaomoji
         * __φ(．．)
         * ```
         */
        const val letter: String = """__φ(．．)"""

        /**
         * ```kaomoji
         * ☆ﾐ(o*･ω･)ﾉ
         * ```
         */
        const val run: String = """☆ﾐ(o*･ω･)ﾉ"""

        /**
         * ```kaomoji
         * [(－－)]..zzZ
         * ```
         */
        const val sleap: String = """[(－－)]..zzZ"""

        /**
         * ```kaomoji
         * (=^･ω･^=)
         * ```
         */
        const val cat: String = """(=^･ω･^=)"""

        /**
         * ```kaomoji
         * ( ´(ｴ)ˋ )
         * ```
         */
        const val bear: String = """( ´(ｴ)ˋ )"""

        /**
         * ```kaomoji
         * ∪＾ェ＾∪
         * ```
         */
        const val dog: String = """∪＾ェ＾∪"""

        /**
         * ```kaomoji
         * ／(≧ x ≦)＼
         * ```
         */
        const val rabbit: String = """／(≧ x ≦)＼"""

        /**
         * ```kaomoji
         * ( ´(00)ˋ )
         * ```
         */
        const val pig: String = """( ´(00)ˋ )"""

        /**
         * ```kaomoji
         * (￣Θ￣)
         * ```
         */
        const val bird: String = """(￣Θ￣)"""

        /**
         * ```kaomoji
         * (°)#))<<
         * ```
         */
        const val fish: String = """(°)#))<<"""

        /**
         * ```kaomoji
         * /╲/\╭(ఠఠ益ఠఠ)╮/\╱\
         * ```
         */
        const val spider: String = """/╲/\╭(ఠఠ益ఠఠ)╮/\╱\"""

        /**
         * ```kaomoji
         * ヾ(・ω・)メ(・ω・)ノ
         * ```
         */
        const val friends: String = """ヾ(・ω・)メ(・ω・)ノ"""

        /**
         * ```kaomoji
         * ヽ( ･∀･)ﾉ_θ彡☆Σ(ノ `Д´)ノ
         * ```
         */
        const val enemies: String = """ヽ( ･∀･)ﾉ_θ彡☆Σ(ノ `Д´)ノ"""

        /**
         * ```kaomoji
         * ( ・∀・)・・・--------☆
         * ```
         */
        const val weapon: String = """( ・∀・)・・・--------☆"""

        /**
         * ```kaomoji
         * (ノ ˘_˘)ノ　ζ|||ζ　ζ|||ζ　ζ|||ζ
         * ```
         */
        const val magic: String = """(ノ ˘_˘)ノ　ζ|||ζ　ζ|||ζ　ζ|||ζ"""

        /**
         * ```kaomoji
         * (っ˘ڡ˘ς)
         * ```
         */
        const val food: String = """(っ˘ڡ˘ς)"""

        /**
         * ```kaomoji
         * ヾ(´〇`)ﾉ♪♪♪
         * ```
         */
        const val music: String = """ヾ(´〇`)ﾉ♪♪♪"""

        /**
         * ```kaomoji
         * ( ^^)p_____|_o____q(^^ )
         * ```
         */
        const val games: String = """( ^^)p_____|_o____q(^^ )"""

        /**
         * ```kaomoji
         * (ʘ ͜ʖ ʘ)
         * ```
         */
        const val faces: String = """(ʘ ͜ʖ ʘ)"""

        /**
         * ```kaomoji
         * ٩(ˊ〇ˋ*)و
         * ```
         */
        const val `wakes up`: String = """٩(ˊ〇ˋ*)و"""

        /**
         * ```kaomoji
         * (￣^￣)ゞ
         * ```
         */
        const val salutes: String = """(￣^￣)ゞ"""

        /**
         * ```kaomoji
         * (－‸ლ)
         * ```
         */
        const val facepalm: String = """(－‸ლ)"""

        /**
         * ```kaomoji
         * (╯°益°)╯彡┻━┻
         * ```
         */
        const val `in anger throws a table`: String = """(╯°益°)╯彡┻━┻"""

        /**
         * ```kaomoji
         * (╮°-°)╮┳━━┳ ( ╯°□°)╯ ┻━━┻
         * ```
         */
        const val `took the table and made a riot`: String = """(╮°-°)╮┳━━┳ ( ╯°□°)╯ ┻━━┻"""

        /**
         * ```kaomoji
         * ┬─┬ノ( º _ ºノ)
         * ```
         */
        const val `put the table in place`: String = """┬─┬ノ( º _ ºノ)"""

        /**
         * ```kaomoji
         * (oT-T)尸
         * ```
         */
        const val surrender: String = """(oT-T)尸"""

        /**
         * ```kaomoji
         * ( ͡° ͜ʖ ͡°)
         * ```
         */
        const val `Lenny face`: String = """( ͡° ͜ʖ ͡°)"""

        /**
         * ```kaomoji
         * [̲̅$̲̅(̲̅ ͡° ͜ʖ ͡°̲̅)̲̅$̲̅]
         * ```
         */
        const val money: String = """[̲̅$̲̅(̲̅ ͡° ͜ʖ ͡°̲̅)̲̅$̲̅]"""

        /**
         * ```kaomoji
         * (ಠ_ಠ)
         * ```
         */
        const val `a look of disapproval`: String = """(ಠ_ಠ)"""

        /**
         * ```kaomoji
         * ౦０o ｡ (‾́。‾́ )y~~
         * ```
         */
        const val smokes: String = """౦０o ｡ (‾́。‾́ )y~~"""

        /**
         * ```kaomoji
         * (￣﹃￣)
         * ```
         */
        const val hungry: String = """(￣﹃￣)"""

        /**
         * ```kaomoji
         * (x(x_(x_x(O_o)x_x)_x)x)
         * ```
         */
        const val `live among zombies`: String = """(x(x_(x_x(O_o)x_x)_x)x)"""

        /**
         * ```kaomoji
         * (　･ω･)☞
         * ```
         */
        const val indicates: String = """(　･ω･)☞"""

        /**
         * ```kaomoji
         * (⌐■_■)
         * ```
         */
        const val spectacled: String = """(⌐■_■)"""

        /**
         * ```kaomoji
         * (◕‿◕✿)
         * ```
         */
        const val sweet: String = """(◕‿◕✿)"""

        /**
         * ```kaomoji
         * (　￣.)o-　　【　TV　】
         * ```
         */
        const val `watching TV`: String = """(　￣.)o-　　【　TV　】"""

        /**
         * ```kaomoji
         * ｀、ヽ｀ヽ｀、ヽ(ノ＞＜)ノ ｀、ヽ｀☂ヽ｀、ヽ
         * ```
         */
        const val `catching umbrella in the rain`: String = """｀、ヽ｀ヽ｀、ヽ(ノ＞＜)ノ ｀、ヽ｀☂ヽ｀、ヽ"""

        /**
         * ```kaomoji
         * ‿︵‿︵‿︵‿ヽ(°□° )ノ︵‿︵‿︵‿︵
         * ```
         */
        const val drowning: String = """‿︵‿︵‿︵‿ヽ(°□° )ノ︵‿︵‿︵‿︵"""

        /**
         * ```kaomoji
         * ( • )( • )ԅ(≖‿≖ԅ)
         * ```
         */
        const val `touches boobs`: String = """( • )( • )ԅ(≖‿≖ԅ)"""

        /**
         * ```kaomoji
         * ( ＾▽＾)っ✂╰⋃╯
         * ```
         */
        const val `punishment for cheating`: String = """( ＾▽＾)っ✂╰⋃╯"""

        /**
         * ```kaomoji
         * 〜〜(／￣▽)／　〜ф
         * ```
         */
        const val `chasing a butterfly`: String = """〜〜(／￣▽)／　〜ф"""

        /**
         * ```kaomoji
         * ଘ(੭ˊᵕˋ)੭* ੈ✩‧₊˚
         * ```
         */
        const val angel: String = """ଘ(੭ˊᵕˋ)੭* ੈ✩‧₊˚"""

        /**
         * ```kaomoji
         * ଘ(੭ˊ꒳ˋ)੭✧
         * ```
         */
        const val `little angel`: String = """ଘ(੭ˊ꒳ˋ)੭✧"""

        /**
         * ```kaomoji
         * _(:3 」∠)_
         * ```
         */
        const val `lying smiley`: String = """_(:3 」∠)_"""

        /**
         * ```kaomoji
         * ∠( ᐛ 」∠)＿
         * ```
         */
        const val lay: String = """∠( ᐛ 」∠)＿"""

        /**
         * ```kaomoji
         * (n_n)
         * ```
         */
        const val smile: String = """(n_n)"""

        /**
         * ```kaomoji
         * (^_^)
         * ```
         */
        const val happiness: String = """(^_^)"""

        /**
         * ```kaomoji
         * (<_>)
         * ```
         */
        const val sorrow: String = """(<_>)"""

        /**
         * ```kaomoji
         * (^ ^)
         * ```
         */
        const val `smile through power`: String = """(^ ^)"""

        /**
         * ```kaomoji
         * (>_<)
         * ```
         */
        const val fatigue: String = """(>_<)"""

        /**
         * ```kaomoji
         * (>_>)
         * ```
         */
        const val skepticism: String = """(>_>)"""

        /**
         * ```kaomoji
         * (-_-")
         * ```
         */
        const val tangle: String = """(-_-")"""

        /**
         * ```kaomoji
         * ^_"
         * ```
         */
        const val discomfiture: String = """^_^""""

        /**
         * ```kaomoji
         * *^_^*
         * ```
         */
        const val `embarrassment with redness`: String = """*^_^*"""

        /**
         * ```kaomoji
         * (-_-#)
         * ```
         */
        const val rage: String = """(-_-#)"""

        /**
         * ```kaomoji
         * (0_0)
         * ```
         */
        const val `strong surprise`: String = """(0_0)"""

        /**
         * ```kaomoji
         * (O_o)
         * ```
         */
        const val `eyes twisted`: String = """(O_o)"""

        /**
         * ```kaomoji
         * (V_v)
         * ```
         */
        const val `unpleasant surprise`: String = """(V_v)"""

        /**
         * ```kaomoji
         * (@_@)
         * ```
         */
        const val awesome: String = """(@_@)"""

        /**
         * ```kaomoji
         * (%_%)
         * ```
         */
        const val `eye strain`: String = """(%_%)"""

        /**
         * ```kaomoji
         * (u_u)
         * ```
         */
        const val depression: String = """(u_u)"""

        /**
         * ```kaomoji
         * (>x<!)
         * ```
         */
        const val `heck!`: String = """(>x<!)"""

        /**
         * ```kaomoji
         * 8(>_<)8
         * ```
         */
        const val jealous: String = """8(>_<)8"""

        /**
         * ```kaomoji
         * (>>)
         * ```
         */
        const val `side glance`: String = """(>>)"""

        /**
         * ```kaomoji
         * (0_<)
         * ```
         */
        const val `nervous tick`: String = """(0_<)"""

        /**
         * ```kaomoji
         * (*_*)
         * ```
         */
        const val delight: String = """(*_*)"""

        /**
         * ```kaomoji
         * -__-
         * ```
         */
        const val phlegm: String = """-__-"""

        /**
         * ```kaomoji
         * (9_9)
         * ```
         */
        const val `stayed up all night`: String = """(9_9)"""

        /**
         * ```kaomoji
         * =__=
         * ```
         */
        const val sleepy: String = """=__="""

        /**
         * ```kaomoji
         * (-.-)Zzz.
         * ```
         */
        const val sleeping: String = """(-.-)Zzz."""

        /**
         * ```kaomoji
         * (-_-;)
         * ```
         */
        const val soreness: String = """(-_-;)"""

        /**
         * ```kaomoji
         * (Х_х)
         * ```
         */
        const val corpse: String = """(Х_х)"""

        /**
         * ```kaomoji
         * (^_~)
         * ```
         */
        const val `give a wink`: String = """(^_~)"""

        /**
         * ```kaomoji
         * (;_;)
         * ```
         */
        const val cry: String = """(;_;)"""

        /**
         * ```kaomoji
         * \..\ ^_^ /../
         * ```
         */
        const val `Sign of the horns`: String = """\..\ ^_^ /../ """

        /**
         * ```kaomoji
         * ^__^
         * ```
         */
        const val Haruhi: String = """^__^"""

        /**
         * ```kaomoji
         * (=^.^=)
         * ```
         */
        const val catwoman: String = """(=^.^=)"""

        /**
         * ```kaomoji
         * (O,o)
         * ```
         */
        const val owl: String = """(O,o)"""

        /**
         * ```kaomoji
         * ///_Т
         * ```
         */
        const val `emo kid`: String = """///_Т"""

        /**
         * ```kaomoji
         * ^_T
         * ```
         */
        const val Triad: String = """^_T"""

        /**
         * ```kaomoji
         * ("\(о_О)/")
         * ```
         */
        const val Hey: String = """("\(о_О)/")"""

        /**
         * ```kaomoji
         * (^>,<^)
         * ```
         */
        const val raccoon: String = """(^>,<^)"""

        /**
         * ```kaomoji
         * ^}{^
         * ```
         */
        const val kiss: String = """^}{^"""

        /**
         * ```kaomoji
         * =X=
         * ```
         */
        const val handshake: String = """=X="""

        /**
         * ```kaomoji
         * @-_-@
         * ```
         */
        const val Aries: String = """@-_-@"""

        /**
         * ```kaomoji
         * (-(-_(-_-(О_о)-_-)_-)-)
         * ```
         */
        const val `someone woke up in the subway`: String = """(-(-_(-_-(О_о)-_-)_-)-)"""

        /**
         * ```kaomoji
         * m9(^Д^)
         * ```
         */
        const val `mocking laugh`: String = """m9(^Д^)"""

        /**
         * ```kaomoji
         * m(_ _)m
         * ```
         */
        const val Kowtow: String = """m(_ _)m"""

        /**
         * ```kaomoji
         * (´･ω･`)
         * ```
         */
        const val `feeling ignored or unimportant`: String = """(´･ω･`)"""

        /**
         * ```kaomoji
         * <`∀´>
         * ```
         */
        @Suppress("ObjectPropertyName", "NonAsciiCharacters")
        const val `stereotypical Korean character (Nidā)`: String = """<`∀´>"""

        /**
         * ```kaomoji
         * (`･ω･´)
         * ```
         */
        const val impudence: String = """(`･ω･´)"""

        /**
         * ```kaomoji
         * ＿|￣|○
         * ```
         */
        const val `give up`: String = """＿|￣|○"""

        /**
         * ```kaomoji
         * (´；ω；`)
         * ```
         */
        const val `terribly sad`: String = """(´；ω；`)"""

        /**
         * ```kaomoji
         * ヽ(´ー｀)ﾉ
         * ```
         */
        const val `peace of mind`: String = """ヽ(´ー｀)ﾉ"""

        /**
         * ```kaomoji
         * ヽ(`Д´)ﾉ
         * ```
         */
        const val irritation: String = """ヽ(`Д´)ﾉ"""

        /**
         * ```kaomoji
         * （ ´Д｀）
         * ```
         */
        const val scream: String = """（ ´Д｀）"""

        /**
         * ```kaomoji
         * （　ﾟДﾟ）
         * ```
         */
        const val `blatant tone`: String = """（　ﾟДﾟ）"""

        /**
         * ```kaomoji
         * ┐('～`；)┌
         * ```
         */
        const val `I do not know`: String = """┐('～`；)┌"""

        /**
         * ```kaomoji
         * （´∀｀）
         * ```
         */
        const val carelessness: String = """（´∀｀）"""

        /**
         * ```kaomoji
         * Σ(゜д゜;)
         * ```
         */
        const val shock: String = """Σ(゜д゜;)"""

        /**
         * ```kaomoji
         * (ﾟヮﾟ)
         * ```
         */
        const val `a good mood`: String = """(ﾟヮﾟ)"""

        /**
         * ```kaomoji
         * キタ━━━(゜∀゜)━━━!!!!!
         * ```
         */
        const val `slang "Kita!"`: String = """キタ━━━(゜∀゜)━━━!!!!!"""

        /**
         * ```kaomoji
         * ｷﾀﾜァ*･゜ﾟ･*:.｡..｡.:*･゜(n‘∀‘)ηﾟ･*:.｡. .｡.:*･゜ﾟ･* !!!!!
         * ```
         */
        const val `girl version of "Kita!"`: String = """ｷﾀﾜァ*･゜ﾟ･*:.｡..｡.:*･゜(n‘∀‘)ηﾟ･*:.｡. .｡.:*･゜ﾟ･* !!!!!"""

        /**
         * ```kaomoji
         * ⊂二二二（　＾ω＾）二⊃
         * ```
         */
        const val `indifferent expression (Bu-n)`: String = """⊂二二二（　＾ω＾）二⊃"""

        /**
         * ```kaomoji
         * (*´Д`)ﾊｧﾊｧ
         * ```
         */
        const val `erotic excitement`: String = """(*´Д`)ﾊｧﾊｧ"""

        /**
         * ```kaomoji
         * (　´Д｀)ﾉ(´･ω･`)　ﾅﾃﾞﾅﾃﾞ
         * ```
         */
        const val pat: String = """(　´Д｀)ﾉ(´･ω･`)　ﾅﾃﾞﾅﾃﾞ"""

        /**
         * ```kaomoji
         * ((((；ﾟДﾟ)))
         * ```
         */
        const val `frightening face`: String = """((((；ﾟДﾟ)))"""

        /**
         * ```kaomoji
         * (´∀｀)σ)∀`)
         * ```
         */
        const val `poke someone on the cheek`: String = """(´∀｀)σ)∀`)"""

        /**
         * ```kaomoji
         * （・∀・ ）ヾ(- -；)コラコラ
         * ```
         */
        const val `swear word "wow, I'll show you!"`: String = """（・∀・ ）ヾ(- -；)コラコラ"""

        /**
         * ```kaomoji
         * (ﾟдﾟ)
         * ```
         */
        const val amazement: String = """(ﾟдﾟ)"""

        /**
         * ```kaomoji
         * (´ー`)y-~~
         * ```
         */
        const val smoke: String = """(´ー`)y-~~"""

        /**
         * ```kaomoji
         * （ ^_^）o自自o（^_^ ）
         * ```
         */
        const val toast: String = """（ ^_^）o自自o（^_^ ）"""

        /**
         * ```kaomoji
         * m9(・∀・)
         * ```
         */
        const val `intuition flash`: String = """m9(・∀・)"""

        /**
         * ```kaomoji
         * ヽ(´ー`)人(´∇｀)人(`Д´)ノ
         * ```
         */
        const val friendliness: String = """ヽ(´ー`)人(´∇｀)人(`Д´)ノ"""

        /**
         * ```kaomoji
         * ('A`)
         * ```
         */
        const val loneliness: String = """('A`)"""

        /**
         * ```kaomoji
         * （ ´,_ゝ`)
         * ```
         */
        const val `indifferent dissatisfaction`: String = """（ ´,_ゝ`)"""

        /**
         * ```kaomoji
         * （´-`）.｡oO(…)
         * ```
         */
        const val `thinking process`: String = """（´-`）.｡oO(…)"""

        /**
         * ```kaomoji
         * (ﾟДﾟ;≡;ﾟДﾟ)
         * ```
         */
        const val inattention: String = """(ﾟДﾟ;≡;ﾟДﾟ)"""

        /**
         * ```kaomoji
         * (´д)ﾋｿ(´Д｀)ﾋｿ(Д｀)
         * ```
         */
        const val whisper: String = """(´д)ﾋｿ(´Д｀)ﾋｿ(Д｀)"""

        /**
         * ```kaomoji
         * （･∀･)つ⑩
         * ```
         */
        const val `gives money`: String = """（･∀･)つ⑩"""

        /**
         * ```kaomoji
         * ⊂（ﾟДﾟ⊂⌒｀つ≡≡≡(´⌒;;;≡≡≡
         * ```
         */
        const val `belly slide`: String = """⊂（ﾟДﾟ⊂⌒｀つ≡≡≡(´⌒;;;≡≡≡"""

        /**
         * ```kaomoji
         * (ﾟ⊿ﾟ)
         * ```
         */
        const val `"I don't need it"`: String = """(ﾟ⊿ﾟ)"""

        /**
         * ```kaomoji
         * щ(ﾟДﾟщ)(屮ﾟДﾟ)屮
         * ```
         */
        const val `"Come on"`: String = """щ(ﾟДﾟщ)(屮ﾟДﾟ)屮"""

        /**
         * ```kaomoji
         * （・∀・）
         * ```
         */
        const val ridicule: String = """（・∀・）"""

        /**
         * ```kaomoji
         * （・Ａ・）
         * ```
         */
        const val `"This is bad"`: String = """（・Ａ・）"""

        /**
         * ```kaomoji
         * (ﾟ∀ﾟ)
         * ```
         */
        const val foolishness: String = """(ﾟ∀ﾟ)"""

        /**
         * ```kaomoji
         * エェェ(´д｀)ェェエ
         * ```
         */
        const val `"unconvincing"`: String = """エェェ(´д｀)ェェエ"""

        /**
         * ```kaomoji
         * (￣ー￣)
         * ```
         */
        const val grin: String = """(￣ー￣)"""

        /**
         * ```kaomoji
         * (ﾟ∀ﾟ)ｱﾊﾊ八八ﾉヽﾉヽﾉヽﾉ ＼ / ＼/ ＼
         * ```
         */
        const val `evil laugh`: String = """(ﾟ∀ﾟ)ｱﾊﾊ八八ﾉヽﾉヽﾉヽﾉ ＼ / ＼/ ＼"""

        /**
         * ```kaomoji
         * [ﾟдﾟ]
         * ```
         */
        const val Deflagged: String = """[ﾟдﾟ]"""

        /**
         * ```kaomoji
         * ♪┏(・o･)┛♪┗ (･o･) ┓♪┏ () ┛♪┗ (･o･) ┓♪┏(･o･)┛♪
         * ```
         */
        const val `dance to music`: String = """♪┏(・o･)┛♪┗ (･o･) ┓♪┏ () ┛♪┗ (･o･) ┓♪┏(･o･)┛♪"""

        /**
         * ```kaomoji
         * d(*⌒▽⌒*)b
         * ```
         */
        const val `happy expression`: String = """d(*⌒▽⌒*)b"""

        /**
         * ```kaomoji
         * OTZ
         * ```
         */
        const val despair: String = """OTZ"""

        /**
         * ```kaomoji
         * (╬ ಠ益ಠ)
         * ```
         */
        const val `extreme disgust`: String = """(╬ ಠ益ಠ)"""

        /**
         * ```kaomoji
         * (ΘεΘ;)
         * ```
         */
        const val `sleeping with boredom`: String = """(ΘεΘ;)"""

        /**
         * ```kaomoji
         * お(^o^)や(^O^)す(^｡^)みぃ(^-^)ﾉﾞ
         * ```
         */
        const val `"good night"`: String = """お(^o^)や(^O^)す(^｡^)みぃ(^-^)ﾉﾞ"""

        /**
         * ```kaomoji
         * ＼| ￣ヘ￣|／＿＿＿＿＿＿＿θ☆(*o*)/
         * ```
         */
        const val kick: String = """＼| ￣ヘ￣|／＿＿＿＿＿＿＿θ☆(*o*)/"""

        /**
         * ```kaomoji
         * （‐＾▽＾‐）オーホッホ
         * ```
         */
        const val giggle: String = """（‐＾▽＾‐）オーホッホ"""

        /**
         * ```kaomoji
         * ┌(；`～,)┐
         * ```
         */
        const val perplexity: String = """┌(；`～,)┐"""

        /**
         * ```kaomoji
         * ヽ(ｏ`皿′ｏ)ﾉ
         * ```
         */
        const val fury: String = """ヽ(ｏ`皿′ｏ)ﾉ"""

        /**
         * ```kaomoji
         * o/ o_ o/ o_
         * ```
         */
        const val `"It's here"`: String = """o/ o_ o/ o_"""

        /**
         * ```kaomoji
         * (☞ﾟヮﾟ)☞
         * ```
         */
        const val `"Do it"`: String = """(☞ﾟヮﾟ)☞"""
    }

    @Suppress("KDocMissingDocumentation", "unused")
    val writing: List<String> = listOf(
        "( ￣ー￣)φ__",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val cheerLeaders: List<String> = listOf(
        "✺◟( • ω • )◞✺",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val salutators: List<String> = listOf(
        "(￣^￣)ゞ",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val tableTakers: List<String> = listOf(
        "(╮°-°)╮┳━━┳ ",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val tableThrowers: List<String> = listOf(
        "( ╯°□°)╯ ┻━━┻",
        "╯‵Д′)╯彡┻━┻ ",
        "(ノಠ益ಠ)ノ彡┻━┻ ",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val smokers: List<String> = listOf(
        "౦０o ｡ (‾́。‾́ )y~~",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val rain: List<String> = listOf(
        "｀、ヽ｀ヽ｀、ヽ(ノ＞＜)ノ ｀、ヽ｀☂ヽ｀、ヽ",
        "｀ヽ｀((((( ( ⊃・ω・)⊃☂｀(´ω｀u)))ヽ｀、",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val tv: List<String> = listOf(
        "【 TV 】      -o(.￣ )",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val fishers: List<String> = listOf(
        "(;`ー´)o/￣￣￣",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val fish: List<String> = listOf(
        "ϵ( 'Θ' )϶",
        "∋(°O°)∈",
        "(〠_〠)",
        "(゜))<<",
        "(°))<<",
        "(°)#))<<",
        "(Q )) >",
        ">_)))彡",
        ">゜))))彡",
        "ζ°)))彡",
        "❥᷁)͜͡˒ ⋊",
        "┣⠉❥᷁)͜͡˒ ⋊",
        "<º))))><",
        "<゜)))彡",
        "><((((●ﾟ<",
        "><((((*ﾟ< >ﾟ*)))><",
        "ζ`))))))<",
        "♪ ε=>`)))>ﾟ)))彡~~",
        "[<+))><< <*))>=<]",
        ">ﾟ)##)彡",
        ">ﾟ)))彡",
        ">゜)))彡",
        "゜~>゜))><",
        ">゜)))><",
        ">°))彡",
        "<・)))><<",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val whales: List<String> = listOf(
        ". ><{{{.______)", ". ><{{{o ______)", ". ><{{{x_______)",
        ". ><(((.______)", ". ><(((o ______)", ". ><(((x_______)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val weapons: List<String> = listOf(
        "̿ ̿̿'̿'\\̵͇̿̿\\=(•̪●)=/̵͇̿̿/'̿̿ ̿ ̿ ̿",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val babies: List<String> = listOf(
        "ლ(´ڡ`ლ)",
        "ლ(́◉◞౪◟◉‵ლ)",
        "(●´ω｀●)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val money: List<String> = listOf(
        "[̲̅\$̲̅(̲̅5̲̅)̲̅\$̲̅]",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val screaming: List<String> = listOf(
        "ヽ(๏∀๏ )ﾉ",
        "ヽ(｀Д´)ﾉ",
        "ヽ(ｏ`皿′ｏ)ﾉ",
        "ヽ(`Д´)ﾉ",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val why: List<String> = listOf(
        "щ（ﾟДﾟщ",
        "щ(ಠ益ಠщ)",
        "щ(ಥДಥщ)",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val goofy: List<String> = listOf(
        "(ό‿ὸ)ﾉ",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val geeks: List<String> = listOf(
        "◖⎚∠⎚◗",
        "[⸌º~°]⸌",
        "◘-◘",
        "[¬⫏-⫐]¬",
        "ㄖꏁㄖ",
        "╰(⊡-⊡)و✎⮹",
        "(⌐■_■)┐",
        "(.づ▣ ͜ʖ▣)づ.",
        "◙‿◙",
        "◪_◪",
        "☐_☐",
        "( •_•)>⌐■-■",
        "<【☯】‿【☯】>",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val pointing: List<String> = listOf(
        "☜ق❂Ⴢ❂ق☞",
        "☜(⌒▽⌒)☞",
        "☜(ﾟヮﾟ☜)",
        "☜-(ΘLΘ)-☞",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val chasing: List<String> = listOf(
        "(○｀д´)ﾉｼ Σ(っﾟДﾟ)っ",
        "☎Σ⊂⊂(☉ω☉∩)",

        )

    @Suppress("KDocMissingDocumentation", "unused")
    val celebrities: List<String> = listOf(
        "⪿ ↂ ˒̫̮ ↂ ⫀", // Elton John
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val excitement: List<String> = listOf(
        "ヽ( ★ω★)ノ",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    val heroes: List<String> = listOf(
        "─=≡Σ(([ ⊐•̀⌂•́]⊐",
    )

    @Suppress("KDocMissingDocumentation", "unused")
    object Dogs {
        fun random(): String {
            val type = listOf(uTypeDogs, აTypeDogs, otherDogs)[(Math.random() * 3).toInt()]
            return type[(Math.random() * type.size).toInt()]
        }

        val uTypeDogs: List<String> = listOf(
            "▼・ᴥ・▼",
            "▼(´ᴥ`)▼",
            "U ´ᴥ` U",
            "U・ᴥ・U",
            "U・ﻌ・U",
            "U ´x` U",
            "(U・x・U)",
            "υ´• ﻌ •`υ",
        )

        @Suppress("ObjectPropertyName", "NonAsciiCharacters")
        val აTypeDogs: List<String> = listOf(
            "૮ ・ﻌ・ა",
            "໒・ﻌ・७",
            "૮ ºﻌºა",
            "૮ ･ ﻌ･ა",
            "૮ ♡ﻌ♡ა",
            "૮ ˙ ﻌ˙ ა",
            "૮ – ﻌ–ა",
            "૮ ˘ﻌ˘ ა",
            "૮ ˆﻌˆ ა",
            "૮ ’ﻌ｀ა",
            "૮ ˶′ﻌ ‵˶ ა",
            "૮ ´• ﻌ ´• ა",
            "૮ ⚆ﻌ⚆ა",
            "૮ ᴖﻌᴖა",
        )

        val otherDogs: List<String> = listOf(
            "(❍ᴥ❍ʋ)",
            "( ͡° ᴥ ͡° ʋ)",
            "V●ω●V",
            "V✪ω✪V",
            "V✪⋏✪V",
            "∪ ̿–⋏ ̿–∪",
            "∪･ω･∪",
            "໒( ●ܫฺ ●)ʋ",
            "໒( = ᴥ =)ʋ",
            "໒( ̿･ ᴥ ̿･ )ʋ",
            "໒( ̿❍ ᴥ ̿❍)ʋ",
            "▽･ｪ･▽ﾉ”",
            "ଘ(∪・ﻌ・∪)ଓ",
            "∪◕ฺᴥ◕ฺ∪",
            "໒(＾ᴥ＾)७",
            "ฅU=ﻌ =Uฅ",
            "ᐡ ・ ﻌ ・ ᐡ",
            "ᐡ ᐧ ﻌ ᐧ ᐡ",
        )
    }

    @Suppress("KDocMissingDocumentation", "unused")
    val stereoTypes = listOf(
        //O RLY?
        """
            ,___,
            [O.o] - O RLY?
            /)__)
            -"--"-
        """.trimIndent(), // hare
        """
            (\_/)
            (O.o)
            (> <)
            /_|_\
        """.trimIndent(), // Cthulhu
        """
              (jIj)
              (;,;)
             (o,.,O)
            Y(O,,,,O)Y
        """.trimIndent(), // steteotypical North Korean character: Kiga
        """
            ［　(★)　］
             <丶´Д｀>
        """.trimIndent(), // steteotypical Japanese character: Mona
        """
                ∧＿∧
            （ ；´Д｀）
        """.trimIndent(), // steteotypical Chinese Korean character: Sina
        """
                ∧∧
              ／ 中＼
            （ 　｀ハ´）
        """.trimIndent(), // steteotypical Taiwanese character: Wana
        """
                  ∧∧
             　 ／　台＼
            　（　＾∀＾）
        """.trimIndent(), // steteotypical Vietamese character: Vena
        """
               ∧∧
             ／ 越 ＼
            （ ・∀・ ）
        """.trimIndent(), // steteotypical Indian character: Monaste
        """
              γ~三ヽ 
             (三彡０ﾐ) 
            （　´∀｀）
        """.trimIndent(), // steteotypical American character: Kiga
        """
              |￣￣| 
             ＿☆☆☆＿ 
            （ ´_⊃｀）
        """.trimIndent(), // stereotypical Jewish character: Yuda
        """
              　 ┏━┓
               ━━━━━━
               ﾐΘc_Θ-ﾐ
        """.trimIndent(), // stereotypical English character: Yaku
        """
               ＿＿ 
              │〓.│ 
              ━━━━━
            ﾐ　´_＞｀）
        """.trimIndent(), // stereotypical French character: Toriri
        """
              ____ 
            （〓__＞
            ξ ・_>・）
        """.trimIndent(), // stereotypical German character: Gerumandanu
        """
             _、,_ 
            ﾐ　　_⊃）
        """.trimIndent(), // stereotypical Austrian character: Osuto
        """
               ≡≡彡
            彡 ´_)｀ ）
        """.trimIndent(), // stereotypical Russian character: Rosuki
        """
             ,,,,,,,,,,,,, 
            　ﾐ;;;,,,,,,,ﾐ　 
              （　｀_っ´）
        """.trimIndent(), // stereotypical Mexican character: Amigo
        """
                _γ⌒ヽ_
              lXXXXXXXXl
            　（　´ｍ｀）
        """.trimIndent(), // stereotypical Persian character: Jujo
        """
                     _
               <(o0o)>
            (>ミ — ミ)>
        """.trimIndent()

    )
}
