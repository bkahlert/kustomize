#!/bin/bash
set -u

# Script to fix an errorneous firstboot scripts directory.
# When using virt-customize's firstboot command line option a script is copied
# to <firstboot>/scripts and named <counter>-script-name whereas <counter>
# is a 4 digit number starting at 0001. Using --firstboot several times correctly
# increases the counter.
# But: If virt-customize itself is called multiple times the counter starts a 0001
# allover again. That is, if the directory already contained
# - 0001-script-a and
# - 0002-script-b
# and you called virt-customize with --firstboot script-1 and --firstboot script-2
# you would end up with the following scripts directory content:
# - 0001-script-1
# - 0001-script-a
# - 0002-script-2
# - 0002-script-b
# So although script-a was supposed to run first script-1 will now run first.
#
# If this script is put in the scripts directory it will solve this issue
# by copying the scripts to a temporary directory will the epoch seconds as the prefix:
# - 212…1-0001-script-a
# - 212…2-0002-script-b
# - 212…3-0001-script-1
# - 212…4-0002-script-2
# This way the scripts will show up again in their intended order.
# Since this step happens while firstboot.sh is already running and calling
# this script the first (due to its name) the scripts that run next are already resolved.
# Therefore the scripts will not be renamed but the correctly ordered copies
# moved back to the scripts directory—this time overwriting the existing scripts
# in the correct order.
# - 0001-script-1 <- 212…1-0001-script-a
# - 0001-script-a <- 212…2-0002-script-b
# - 0002-script-2 <- 212…3-0001-script-1
# - 0002-script-b <- 212…4-0002-script-2
# The downside of this approach is the initially misplaced scripts will wont
# reflect their purpose anymore in the name. For example script 0001-script-1
# does actually run what was originally in 0001-script-a.
export TERM=${TERM:-linux}
trap '[ $? -eq 0 ] && _sound Alert || _sound Error; trap - EXIT; exit' EXIT INT HUP
_sound() {
  _sound="/System/Library/PrivateFrameworks/ScreenReader.framework/Versions/A/Resources/Sounds/$1.aiff"
  ! (which afplay | grep 'not found') && [ -f "$_sound" ] && afplay "$_sound" || _bell
}
_bell="$(tput bel)"
_bold="$(tput bold)"
_reset="$(printf "\e[0;10m")" #"$(tput sgr0)"
_bell() { printf "%s" "$_bell"; }
_el="$(tput el)"                       # clear to end of line
_dim="$(tput dim)"                     # dim
_cursorUp() { tput cuu "${1:-1}"; }    # move $1 (default 1) positions up
_cursorDown() { tput cud "${1:-1}"; }  # move $1 (default 1) positions down
_cursorLeft() { tput cub "${1:-1}"; }  # move $1 (default 1) positions left
_cursorRight() { tput cuf "${1:-1}"; } # move $1 (default 1) positions right
_black="$(tput setaf 0)"
_brightBlack="$_bold$_black"
_gray="$_brightBlack"
_red="$(tput setaf 1)"
_brightRed="$_bold$_red"
_green="$(tput setaf 2)"
_brightGreen="$_bold$_green"
_yellow="$(tput setaf 3)"
_brightYellow="$_bold$_yellow"
_blue="$(tput setaf 4)"
_brightBlue="$_bold$_blue"
_magenta="$(tput setaf 5)"
_brightMagenta="$_bold$_magenta"
_cyan="$(tput setaf 6)"
_brightCyan="$_bold$_cyan"
_white="$(tput setaf 7)"
_brightWhite="$_bold$_white"
_info="${_white}ℹ${_reset}"
_info() { [ -z "${1:-}" ] && echo "$_info" || echo "$_info $*"; }
_ok="${_green}✔${_reset}"
_ok() { [ -z "${1:-}" ] && echo "$_ok" || echo "$_ok $*"; }
_new="${_yellow}✱${_reset}"
_new() { [ -z "${1:-}" ] && echo "$_new" || echo "$_new $*"; }
_item="${_blue}▪${_reset}"
_item() { [ -z "${1:-}" ] && echo "$_item" || echo "$_item $*"; }
_list() { for item in "$@"; do _item "$item"; done; }
_error="${_brightRed}✘${_reset}"
_error() { [ -z "${1:-}" ] && echo "$_failure" || echo "$_failure $*"; }
_failure="$_error"
_failure() { _error "$@"; }
_last_start=''
_start="${_cyan}…${_reset}"
_start() {
  [ -z "${1:-}" ] && _last_start="$_start" || _last_start="$* $_start"
  echo "${_last_start}"
}

_end() { printf "\n%s%s%s%s%s%s%s\n" "$(_cursorUp 2)" "$_el" "$_dim" "$_reset" "${_last_start}" "$(_cursorLeft 2)" " ${1:-?}"; }
_test_print() {
  echo "$_black ▎$_red ▎$_green ▍$_yellow ▌$_blue ▋$_magenta ▊$_cyan ▉$_white █$_reset"
  echo "$_gray ▎$_brightRed ▎$_brightGreen ▍$_brightYellow ▌$_brightBlue ▋$_brightMagenta ▊$_brightCyan ▉$_brightWhite █$_reset"
  _info
  _info "$TERM"
  _ok
  _ok "success 123"
  _new
  _new "new 123"
  _item
  _item "item 123"
  _list "item 1" "item 2" "item 3"
  _error
  _error "error 123"
  _start "Processing"
  _start "Processing"
  _end "$_ok"
  _start "Processing"
  _end "$_error"
  _sound Error
}
if [ "${1:-}" = "test" ]; then
  _test_print
  exit 0
fi

echo "== Fixing script order =="
WORKDIR=$(pwd)
_info "working directory: ${WORKDIR}"
BASEDIR=$(dirname "$0")
_info "base directory: ${BASEDIR}"
BASENAME=$(basename "$0")
_info "base name: ${BASENAME}"
PARENTDIR=$(dirname "${BASEDIR}")
_info "parent directory: ${PARENTDIR}"

SCRIPTS_DIR="${PARENTDIR}/scripts"
COPIES_DIR="${PARENTDIR}/copies"
[ -d "${COPIES_DIR}" ] && rm -f "${COPIES_DIR}"
mkdir -p "${COPIES_DIR}"
if [ ! -d "${COPIES_DIR}" ]; then
  echo "Could not create ${COPIES_DIR}"
  exit 1
fi

_start "Copying all firstboot scripts timestamp-prefixed to ${COPIES_DIR}"
find "${SCRIPTS_DIR}" -type f -printf "%AY%Am%Ad%AH%AM%AS %p\n" | sort -n | while read -r _FILE; do
  _TIMESTAMP="$(echo "${_FILE}" | awk '{print $1}')"
  _FILE="$(echo "${_FILE}" | awk '{print $2}')"
  _FILE="$(basename "${_FILE}")"
  _COPY="${COPIES_DIR}/${_TIMESTAMP}-${_FILE}"

  # ignore this script itself, non-regular files and all non-executables
  if [ ! "${SCRIPTS_DIR}/${_FILE}" = "${BASENAME}" ] && [ -x "${SCRIPTS_DIR}/${_FILE}" ] && [ -f "${SCRIPTS_DIR}/${_FILE}" ]; then
    # ignore already copied files
    if [ ! -f "${_COPY}" ]; then

      printf "\n  "
      _item "${SCRIPTS_DIR}/${_FILE}"
      printf "    ⮕ %s\n" "${_COPY}"

      cp -p "${SCRIPTS_DIR}/${_FILE}" "${_COPY}"
    fi
  fi
done
_end "$_ok"

_start "Moving back firstboot script copies so that alphabetical order reflects the intended order"
find "${SCRIPTS_DIR}" -type f | while read -r _FILE; do
  _FILE="$(basename "${_FILE}")"

  # ignore this script itself, non-regular files and all non-executables
  if [ ! "${SCRIPTS_DIR}/${_FILE}" = "${BASENAME}" ] && [ -x "${SCRIPTS_DIR}/${_FILE}" ] && [ -f "${SCRIPTS_DIR}/${_FILE}" ]; then

    _COPY="$(find "${COPIES_DIR}" -type f -printf '%p\n' | sort -n | head -n 1)"

    printf "\n  "
    _item "${SCRIPTS_DIR}/${_FILE}"
    printf "    ⬅ %s\n" "${_COPY}"

    mv -f "${_COPY}" "${SCRIPTS_DIR}/${_FILE}"
    touch "${SCRIPTS_DIR}/${_FILE}"
    sleep 1
  fi
done
_end "$_ok"

_start "Contents of files swapped but enumeration order kept"
find "${SCRIPTS_DIR}" -type f | while read -r _FILE; do
  _FILE=$(basename "${_FILE}")
  # ignore this script itself, non-regular files and all non-executables
  if [ ! "${SCRIPTS_DIR}/${_FILE}" = "${BASENAME}" ] && [ -x "${SCRIPTS_DIR}/${_FILE}" ] && [ -f "${SCRIPTS_DIR}/${_FILE}" ]; then
    printf "\n  "
    _item "${SCRIPTS_DIR}/${_FILE}"
  fi
done
_end "$_ok"

_start "Checking if all went well …"
if [ -z "$(ls -A "${COPIES_DIR}")" ]; then
  rmdir "${COPIES_DIR}"
  _end "$_ok"
  _sound Alert
else
  _end "$_error"
  _sound Error
  echo "❖ The following firstboot script copies were not copied back:"
  ls "${COPIES_DIR}"
  exit 1
fi
