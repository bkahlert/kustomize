img {

  trace = false

  name = bother-you
  os = Raspberry Pi OS Lite

  timezone = Europe/Berlin

  hostname {
    name: "bother-you"
    random-suffix: true
  }

  wifi {
    wpa-supplicant = ${IMG_CSTMZR_WPA_SUPPLICANT}
    //    auto-reconnect = true
    power-safe-mode = false
  }

  size = 8 GiB

  ssh {
    enabled: true
    port: 3421
    authorized-keys = {
      files: ["$HOME/.ssh/id_*.pub"]
    }
  }

  default-user {
    newUsername: ${IMG_CSTMZR_USERNAME}
    newPassword: ${IMG_CSTMZR_PASSWORD}
  }

  samba {
    homeShare: true
    rootShare: read-write
  }

  usb-otg: "g_multi" // g_acm_ms, g_webcam, g_hid
  usb-otg-options: [usb0-interfaces, usb0-dhcp, usb0-dnsmasq]

  tweaks {
    apt-retries: 10
  }

  files = [
    {
      host-path: ${BOTHER_YOU_FLOW}
      disk-path: /home/${IMG_CSTMZR_USERNAME}/.node-red/flows.json
    }
  ]

  setup = [
    {
      name: update
      scripts: [
        {
          name: "Ÿ©(ÔΩ°‚Ä¢œâ‚Ä¢ÔΩ°)Ÿà install ca-certificates"
          content: """
              apt-get install -y -m ca-certificates
              """
        },
        {
          name: "set timezone to UTC"
          content: """
              timedatectl set-local-rtc 0
              """
        },
        {
          name: "set timezone to "${img.timezone}
          content: """
              ln -sf /usr/share/zoneinfo/"""${img.timezone}""" /etc/localtime
              """
        },
        {
          name: "ÀêÃóÃÄŸ©Íí∞ÍãÉÍí±ŸàÀêÃñÃÅ UPDATE ‡≥ï(ÀÉÃµ·¥óÀÇÃµ ‡πë)"
          content: """
              sudo apt-get update
              sudo apt-get upgrade
              sudo rpi-update
              """
        }
      ]
    },
    {
      name: the basics
      scripts: [
        {
          name: "remove unused DHCP clients Œ£‚äÇ‚äÇ(‚òâœâ‚òâ‚à©)"
          content: """
              apt-get purge -y -m isc-dhcp-client
              apt-get purge -y -m udhcpd
              """
        },
        {
          name: "set keyboard layout to de ‚úßŸ©(‚Ä¢ÃÅ‚åÑ‚Ä¢ÃÅ‡πë)"
          content: """
              sed -i 's/XKBLAYOUT=\"\w*"/XKBLAYOUT=\"'de'\"/g' /etc/default/keyboard
              """
        },
        {
          name: "set locale to de_DE ‡≥ï(ÀÉÃµ·¥óÀÇÃµ ‡πë)"
          content: """
              sed -i 's/XKBLAYOUT=\"\w*"/XKBLAYOUT=\"'de'\"/g' /etc/default/keyboard
              """
        },
        {
          name: "Ÿ©(ÔΩ°‚Ä¢œâ‚Ä¢ÔΩ°)Ÿà install build tools"
          content: """
              apt-get update -y -m
              apt-get install -y -m build-essential
              apt-get install -y -m git
              """
        },
        {
          name: "(€∂‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)€∂ install Python 3 pip"
          content: """
              apt-get install -y -m python3-pip
              """
        },
        {
          name: "install health checks Ÿ©(‚ú™ÍÄæ‚çü‡º∂)Ÿà"
          content: """
              command -v sch >/dev/null 2>&1 || { apt-get update; pip3 install sch; }
              """
        }
      ]
    },
    {
      name: misc
      scripts: [
        {
          name: "Install Avahi Ÿ©( ·êõ )Ÿà"
          content: """
              apt-get install -y -m avahi-daemon
              mkdir -p /etc/avahi/services
              """
        },
        {
          name: "Configure Avahi (*‚âß‚àÄ‚â¶)Ôæâ DEVICE-INFO"
          content: """
              cat <<EOF >/etc/avahi/services/device-info.service
              <?xml version="1.0" standalone='no'?><!--*-nxml-*-->
              <!DOCTYPE service-group SYSTEM "avahi-service.dtd">
              <service-group>
                <name replace-wildcards="yes">‚î¥‚î¨‚î¥‚î§¬¥ÔºØ¬¥)Ôæâ  """${IMG_CSTMZR_USERNAME}"""!?  Œ£(‚Äò–î‚Äô‚Åï)</name>
                <service>
                  <type>_device-info._tcp</type>
                  <port>0</port>
                  <txt-record>model=AirPortExtreme5</txt-record>
                  <!-- check /System/Library/CoreServices/CoreTypes.bundle/Contents/Info.plist for all possible values -->
                </service>
              </service-group>
              EOF
              """
        },
        {
          name: "Configure Avahi (*‚âß‚àÄ‚â¶)Ôæâ SSH"
          content: """
              cat <<EOF >/etc/avahi/services/ssh.service
              <?xml version="1.0" standalone='no'?><!--*-nxml-*-->
              <!DOCTYPE service-group SYSTEM "avahi-service.dtd">
              <service-group>
                <name replace-wildcards="yes">%h</name>
                <service>
                  <type>_ssh._tcp</type>
                  <port>"""${img.ssh.port}"""</port>
                  <txt-record>user="""${IMG_CSTMZR_USERNAME}"""</txt-record>
                </service>
              </service-group>
              EOF
              """
        },
        {
          name: "Configure Avahi (*‚âß‚àÄ‚â¶)Ôæâ SFTP"
          content: """
              cat <<EOF >/etc/avahi/services/sftp.service
              <?xml version="1.0" standalone='no'?><!--*-nxml-*-->
              <!DOCTYPE service-group SYSTEM "avahi-service.dtd">
              <service-group>
                <name replace-wildcards="yes">%h</name>
                <service>
                  <type>_sftp-ssh._tcp</type>
                  <port>"""${img.ssh.port}"""</port>
                  <txt-record>path=/home/"""${IMG_CSTMZR_USERNAME}"""</txt-record>
                  <txt-record>u="""${IMG_CSTMZR_USERNAME}"""</txt-record>
                </service>
              </service-group>
              EOF
              """
        },
        {
          name: "Configure Avahi (*‚âß‚àÄ‚â¶)Ôæâ SMB"
          content: """
              cat <<EOF >/etc/avahi/services/smb.service
              <?xml version="1.0" standalone='no'?><!--*-nxml-*-->
              <!DOCTYPE service-group SYSTEM "avahi-service.dtd">
              <service-group>
                <name replace-wildcards="yes">%h</name>
                <service>
                  <type>_smb._tcp</type>
                  <port>445</port>
                  <txt-record>user="""${IMG_CSTMZR_USERNAME}"""</txt-record>
                  <txt-record>path=/home</txt-record>
                </service>
              </service-group>
              EOF
              """
        },
        {
          name: "Configure Avahi (*‚âß‚àÄ‚â¶)Ôæâ BOTHER-YOU"
          content: """
              cat <<EOF >/etc/avahi/services/bother-you.service
              <?xml version="1.0" standalone='no'?><!--*-nxml-*-->
              <!DOCTYPE service-group SYSTEM "avahi-service.dtd">
              <service-group>
                <name replace-wildcards="yes">‚î¥‚î¨‚î¥‚î§ÔΩ•‚ÄøÔΩ•)œÉ  """${IMG_CSTMZR_USERNAME}"""'s status  üïö(Àä‚ÄøÀã‚Åï)2'</name>
                <service>
                  <type>_http._tcp</type>
                  <port>80</port>
                  <txt-record>path=/status</txt-record>
                </service>
              </service-group>
              EOF
              """
        },
        {
          name: "Enable Avahi (‡∏á Õ° ò Õú ñ Õ° ò)‡∏á"
          content: """
              systemctl enable avahi-daemon
              systemctl start avahi-daemon
              """
        },
        {
          name: "Ÿ©(‡πë‚Ä¢ÃÄ„ÖÇ‚Ä¢ÃÅ)Ÿà install browser" TODO
          content: """
              apt-get install -y midori
              """
        },
        {
          name: "(‡∏á Õ° ò Õú ñ Õ° ò)‡∏á install Docker pre-requisites"
          content: """
              apt-get install -qq -m apt-transport-https ca-certificates software-properties-common
              cat /boot/cmdline.txt | grep -a " cgroup_enable=cpuset" 1>/dev/null || echo -n "$(cat /boot/cmdline.txt) cgroup_enable=cpuset" | sudo tee /boot/cmdline.txt
              cat /boot/cmdline.txt | grep -a " cgroup_enable=memory" 1>/dev/null || echo -n "$(cat /boot/cmdline.txt) cgroup_enable=memory" | sudo tee /boot/cmdline.txt
              """
        },
        {
          name: "#TODO # Bluetooth" TODO
          content: """
              #apt-get install bluez-tools
              """
        },
      ]
    },
  ]

  first-boot = [ # TODO implement first-boot, hypricot, ansible
    {
      name: "install Docker Ÿ©(Àä·óúÀã*)Ÿà"
      content: """
          curl -fsSL https://get.docker.com | sh
          usermod -aG docker """${IMG_CSTMZR_USERNAME}"""
          pip3 -v install docker-compose
          """
    },
    {
      name: "\\ \\ \\Ÿ©(‡πëÀÉÃµ·¥óÀÇÃµ)Ÿà/ / / install dockerized Node-RED"
      content: """
          mkdir -p /home/"""${IMG_CSTMZR_USERNAME}"""/.node-red

          cat <<EOF >/home/"""${IMG_CSTMZR_USERNAME}"""/docker-compose.yml
          version: "3.5"

          services:
            node-red:
              image: nodered/node-red:1.2.7-10-arm32v6
              environment:
                - TZ="""${img.timezone}"""
              volumes:
                - /home/"""${IMG_CSTMZR_USERNAME}"""/.node-red:/data
              networks:
                - node-red-net
              ports:
                - 1880:1880
              restart: unless-stopped

            gpiod: # use service name "gpiod" and port "8888" to connect to gpiod services
              image: corbosman/pigpiod:latest
              privileged: true
              restart: unless-stopped
              networks:
                - node-red-net

          networks:
            node-red-net:
              name: May I Bother You?
          EOF

          docker-compose -f /home/"""${IMG_CSTMZR_USERNAME}"""/docker-compose.yml -p bother-you up -d
          """
    },
    {
      name: "Node-RED Extensions ‚úßŸ©(ÀäœâÀã*)Ÿà‚úß"
      content: """
          docker exec -it bother-you_node-red_1 npm config set unsafe-perm true
          docker exec -it bother-you_node-red_1 npm install node-red-dashboard node-red-node-ui-iframe node-red-node-ui-webcam
          docker exec -it bother-you_node-red_1 npm install node-red-contrib-play-audio node-red-contrib-huemagic
          docker-compose -f /home/"""${IMG_CSTMZR_USERNAME}"""/docker-compose.yml restart
          """
    },
    {
      name: "Tailscale VPN Client ‚úßŸ©(‚Ä¢ÃÅ‚åÑ‚Ä¢ÃÅ‡πë)Ÿà ‚úß"
      content: """
          apt-get install -y apt-transport-https
          curl -fsSL https://pkgs.tailscale.com/stable/raspbian/buster.gpg | apt-key add -
          curl -fsSL https://pkgs.tailscale.com/stable/raspbian/buster.list | tee /etc/apt/sources.list.d/tailscale.list
          apt-get update
          apt-get install tailscale
          echo "Visit https://login.tailscale.com/admin/authkeys to create a new key if the following one is expired"
          tailscale --verbose=0 --authkey """${IMG_CSTMZR_TAILSCALE}""" up && ip addr show tailscale0
          """
    },
    {
      name: "Use available space"
      content: """
          sudo raspi-config --expand-rootfs
          """
    },
    {
      name: "REBOOT"
      content: """
          shutdown -r now
          """
    },
  ]
}
